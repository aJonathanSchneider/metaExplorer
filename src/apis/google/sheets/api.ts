// tslint:disable

//non-generated part to fix errors from old swagger-generator-version
export interface ERRORUNKNOWN {
    
}


/**
 * Google Sheets
 * Reads and writes Google Sheets.
 *
 * OpenAPI spec version: v4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://sheets.googleapis.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<GSheetsResponse>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Adds a new banded range to the spreadsheet.
 * @export
 * @interface AddBandingRequest
 */
export interface AddBandingRequest {
    /**
     * The banded range to add. The bandedRangeId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a range that already exists.)
     * @type {BandedRange}
     * @memberof AddBandingRequest
     */
    bandedRange?: BandedRange;
}

/**
 * The result of adding a banded range.
 * @export
 * @interface AddBandingResponse
 */
export interface AddBandingResponse {
    /**
     * The banded range that was added.
     * @type {BandedRange}
     * @memberof AddBandingResponse
     */
    bandedRange?: BandedRange;
}

/**
 * Adds a chart to a sheet in the spreadsheet.
 * @export
 * @interface AddChartRequest
 */
export interface AddChartRequest {
    /**
     * The chart that should be added to the spreadsheet, including the position where it should be placed. The chartId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a chart that already exists.)
     * @type {EmbeddedChart}
     * @memberof AddChartRequest
     */
    chart?: EmbeddedChart;
}

/**
 * The result of adding a chart to a spreadsheet.
 * @export
 * @interface AddChartResponse
 */
export interface AddChartResponse {
    /**
     * The newly added chart.
     * @type {EmbeddedChart}
     * @memberof AddChartResponse
     */
    chart?: EmbeddedChart;
}

/**
 * Adds a new conditional format rule at the given index. All subsequent rules' indexes are incremented.
 * @export
 * @interface AddConditionalFormatRuleRequest
 */
export interface AddConditionalFormatRuleRequest {
    /**
     * The zero-based index where the rule should be inserted.
     * @type {number}
     * @memberof AddConditionalFormatRuleRequest
     */
    index?: number;
    /**
     * The rule to add.
     * @type {ConditionalFormatRule}
     * @memberof AddConditionalFormatRuleRequest
     */
    rule?: ConditionalFormatRule;
}

/**
 * Creates a group over the specified range.  If the requested range is a superset of the range of an existing group G, then the depth of G is incremented and this new group G' has the depth of that group. For example, a group [C:D, depth 1] + [B:E] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range is a subset of the range of an existing group G, then the depth of the new group G' becomes one greater than the depth of G. For example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range starts before and ends within, or starts within and ends after, the range of an existing group G, then the range of the existing group G becomes the union of the ranges, and the new group G' has depth one greater than the depth of G and range as the intersection of the ranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E, depth 1] and [C:D, depth 2].
 * @export
 * @interface AddDimensionGroupRequest
 */
export interface AddDimensionGroupRequest {
    /**
     * The range over which to create a group.
     * @type {DimensionRange}
     * @memberof AddDimensionGroupRequest
     */
    range?: DimensionRange;
}

/**
 * The result of adding a group.
 * @export
 * @interface AddDimensionGroupResponse
 */
export interface AddDimensionGroupResponse {
    /**
     * All groups of a dimension after adding a group to that dimension.
     * @type {Array&lt;DimensionGroup&gt;}
     * @memberof AddDimensionGroupResponse
     */
    dimensionGroups?: Array<DimensionGroup>;
}

/**
 * Adds a filter view.
 * @export
 * @interface AddFilterViewRequest
 */
export interface AddFilterViewRequest {
    /**
     * The filter to add. The filterViewId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a filter that already exists.)
     * @type {FilterView}
     * @memberof AddFilterViewRequest
     */
    filter?: FilterView;
}

/**
 * The result of adding a filter view.
 * @export
 * @interface AddFilterViewResponse
 */
export interface AddFilterViewResponse {
    /**
     * The newly added filter view.
     * @type {FilterView}
     * @memberof AddFilterViewResponse
     */
    filter?: FilterView;
}

/**
 * Adds a named range to the spreadsheet.
 * @export
 * @interface AddNamedRangeRequest
 */
export interface AddNamedRangeRequest {
    /**
     * The named range to add. The namedRangeId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a range that already exists.)
     * @type {NamedRange}
     * @memberof AddNamedRangeRequest
     */
    namedRange?: NamedRange;
}

/**
 * The result of adding a named range.
 * @export
 * @interface AddNamedRangeResponse
 */
export interface AddNamedRangeResponse {
    /**
     * The named range to add.
     * @type {NamedRange}
     * @memberof AddNamedRangeResponse
     */
    namedRange?: NamedRange;
}

/**
 * Adds a new protected range.
 * @export
 * @interface AddProtectedRangeRequest
 */
export interface AddProtectedRangeRequest {
    /**
     * The protected range to be added. The protectedRangeId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a range that already exists.)
     * @type {ProtectedRange}
     * @memberof AddProtectedRangeRequest
     */
    protectedRange?: ProtectedRange;
}

/**
 * The result of adding a new protected range.
 * @export
 * @interface AddProtectedRangeResponse
 */
export interface AddProtectedRangeResponse {
    /**
     * The newly added protected range.
     * @type {ProtectedRange}
     * @memberof AddProtectedRangeResponse
     */
    protectedRange?: ProtectedRange;
}

/**
 * Adds a new sheet. When a sheet is added at a given index, all subsequent sheets' indexes are incremented. To add an object sheet, use AddChartRequest instead and specify EmbeddedObjectPosition.sheetId or EmbeddedObjectPosition.newSheet.
 * @export
 * @interface AddSheetRequest
 */
export interface AddSheetRequest {
    /**
     * The properties the new sheet should have. All properties are optional. The sheetId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a sheet that already exists.)
     * @type {SheetProperties}
     * @memberof AddSheetRequest
     */
    properties?: SheetProperties;
}

/**
 * The result of adding a sheet.
 * @export
 * @interface AddSheetResponse
 */
export interface AddSheetResponse {
    /**
     * The properties of the newly added sheet.
     * @type {SheetProperties}
     * @memberof AddSheetResponse
     */
    properties?: SheetProperties;
}

/**
 * Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.
 * @export
 * @interface AppendCellsRequest
 */
export interface AppendCellsRequest {
    /**
     * The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof AppendCellsRequest
     */
    fields?: string;
    /**
     * The data to append.
     * @type {Array&lt;RowData&gt;}
     * @memberof AppendCellsRequest
     */
    rows?: Array<RowData>;
    /**
     * The sheet ID to append the data to.
     * @type {number}
     * @memberof AppendCellsRequest
     */
    sheetId?: number;
}

/**
 * Appends rows or columns to the end of a sheet.
 * @export
 * @interface AppendDimensionRequest
 */
export interface AppendDimensionRequest {
    /**
     * Whether rows or columns should be appended.
     * @type {string}
     * @memberof AppendDimensionRequest
     */
    dimension?: AppendDimensionRequest.DimensionEnum;
    /**
     * The number of rows or columns to append.
     * @type {number}
     * @memberof AppendDimensionRequest
     */
    length?: number;
    /**
     * The sheet to append rows or columns to.
     * @type {number}
     * @memberof AppendDimensionRequest
     */
    sheetId?: number;
}

/**
 * @export
 * @namespace AppendDimensionRequest
 */
export namespace AppendDimensionRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum DimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * The response when updating a range of values in a spreadsheet.
 * @export
 * @interface AppendValuesResponse
 */
export interface AppendValuesResponse {
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof AppendValuesResponse
     */
    spreadsheetId?: string;
    /**
     * The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.
     * @type {string}
     * @memberof AppendValuesResponse
     */
    tableRange?: string;
    /**
     * Information about the updates that were applied.
     * @type {UpdateValuesResponse}
     * @memberof AppendValuesResponse
     */
    updates?: UpdateValuesResponse;
}

/**
 * Fills in more data based on existing data.
 * @export
 * @interface AutoFillRequest
 */
export interface AutoFillRequest {
    /**
     * The range to autofill. This will examine the range and detect the location that has data and automatically fill that data in to the rest of the range.
     * @type {GridRange}
     * @memberof AutoFillRequest
     */
    range?: GridRange;
    /**
     * The source and destination areas to autofill. This explicitly lists the source of the autofill and where to extend that data.
     * @type {SourceAndDestination}
     * @memberof AutoFillRequest
     */
    sourceAndDestination?: SourceAndDestination;
    /**
     * True if we should generate data with the \"alternate\" series. This differs based on the type and amount of source data.
     * @type {boolean}
     * @memberof AutoFillRequest
     */
    useAlternateSeries?: boolean;
}

/**
 * Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
 * @export
 * @interface AutoResizeDimensionsRequest
 */
export interface AutoResizeDimensionsRequest {
    /**
     * The dimensions to automatically resize.
     * @type {DimensionRange}
     * @memberof AutoResizeDimensionsRequest
     */
    dimensions?: DimensionRange;
}

/**
 * A banded (alternating colors) range in a sheet.
 * @export
 * @interface BandedRange
 */
export interface BandedRange {
    /**
     * The id of the banded range.
     * @type {number}
     * @memberof BandedRange
     */
    bandedRangeId?: number;
    /**
     * Properties for column bands. These properties are applied on a column- by-column basis throughout all the columns in the range. At least one of row_properties or column_properties must be specified.
     * @type {BandingProperties}
     * @memberof BandedRange
     */
    columnProperties?: BandingProperties;
    /**
     * The range over which these properties are applied.
     * @type {GridRange}
     * @memberof BandedRange
     */
    range?: GridRange;
    /**
     * Properties for row bands. These properties are applied on a row-by-row basis throughout all the rows in the range. At least one of row_properties or column_properties must be specified.
     * @type {BandingProperties}
     * @memberof BandedRange
     */
    rowProperties?: BandingProperties;
}

/**
 * Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules:  * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties.  For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
 * @export
 * @interface BandingProperties
 */
export interface BandingProperties {
    /**
     * The first color that is alternating. (Required)
     * @type {Color}
     * @memberof BandingProperties
     */
    firstBandColor?: Color;
    /**
     * The color of the last row or column. If this field is not set, the last row or column will be filled with either first_band_color or second_band_color, depending on the color of the previous row or column.
     * @type {Color}
     * @memberof BandingProperties
     */
    footerColor?: Color;
    /**
     * The color of the first row or column. If this field is set, the first row or column will be filled with this color and the colors will alternate between first_band_color and second_band_color starting from the second row or column. Otherwise, the first row or column will be filled with first_band_color and the colors will proceed to alternate as they normally would.
     * @type {Color}
     * @memberof BandingProperties
     */
    headerColor?: Color;
    /**
     * The second color that is alternating. (Required)
     * @type {Color}
     * @memberof BandingProperties
     */
    secondBandColor?: Color;
}

/**
 * An axis of the chart. A chart may not have more than one axis per axis position.
 * @export
 * @interface BasicChartAxis
 */
export interface BasicChartAxis {
    /**
     * The format of the title. Only valid if the axis is not associated with the domain.
     * @type {TextFormat}
     * @memberof BasicChartAxis
     */
    format?: TextFormat;
    /**
     * The position of this axis.
     * @type {string}
     * @memberof BasicChartAxis
     */
    position?: BasicChartAxis.PositionEnum;
    /**
     * The title of this axis. If set, this overrides any title inferred from headers of the data.
     * @type {string}
     * @memberof BasicChartAxis
     */
    title?: string;
    /**
     * The axis title text position.
     * @type {TextPosition}
     * @memberof BasicChartAxis
     */
    titleTextPosition?: TextPosition;
}

/**
 * @export
 * @namespace BasicChartAxis
 */
export namespace BasicChartAxis {
    /**
     * @export
     * @enum {string}
     */
    export enum PositionEnum {
        BASICCHARTAXISPOSITIONUNSPECIFIED = <any> 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED',
        BOTTOMAXIS = <any> 'BOTTOM_AXIS',
        LEFTAXIS = <any> 'LEFT_AXIS',
        RIGHTAXIS = <any> 'RIGHT_AXIS'
    }
}

/**
 * The domain of a chart. For example, if charting stock prices over time, this would be the date.
 * @export
 * @interface BasicChartDomain
 */
export interface BasicChartDomain {
    /**
     * The data of the domain. For example, if charting stock prices over time, this is the data representing the dates.
     * @type {ChartData}
     * @memberof BasicChartDomain
     */
    domain?: ChartData;
    /**
     * True to reverse the order of the domain values (horizontal axis).
     * @type {boolean}
     * @memberof BasicChartDomain
     */
    reversed?: boolean;
}

/**
 * A single series of data in a chart. For example, if charting stock prices over time, multiple series may exist, one for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".
 * @export
 * @interface BasicChartSeries
 */
export interface BasicChartSeries {
    /**
     * The color for elements (i.e. bars, lines, points) associated with this series.  If empty, a default color is used.
     * @type {Color}
     * @memberof BasicChartSeries
     */
    color?: Color;
    /**
     * The line style of this series. Valid only if the chartType is AREA, LINE, or SCATTER. COMBO charts are also supported if the series chart type is AREA or LINE.
     * @type {LineStyle}
     * @memberof BasicChartSeries
     */
    lineStyle?: LineStyle;
    /**
     * The data being visualized in this chart series.
     * @type {ChartData}
     * @memberof BasicChartSeries
     */
    series?: ChartData;
    /**
     * The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the \"Volume\" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
     * @type {string}
     * @memberof BasicChartSeries
     */
    targetAxis?: BasicChartSeries.TargetAxisEnum;
    /**
     * The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
     * @type {string}
     * @memberof BasicChartSeries
     */
    type?: BasicChartSeries.TypeEnum;
}

/**
 * @export
 * @namespace BasicChartSeries
 */
export namespace BasicChartSeries {
    /**
     * @export
     * @enum {string}
     */
    export enum TargetAxisEnum {
        BASICCHARTAXISPOSITIONUNSPECIFIED = <any> 'BASIC_CHART_AXIS_POSITION_UNSPECIFIED',
        BOTTOMAXIS = <any> 'BOTTOM_AXIS',
        LEFTAXIS = <any> 'LEFT_AXIS',
        RIGHTAXIS = <any> 'RIGHT_AXIS'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        BASICCHARTTYPEUNSPECIFIED = <any> 'BASIC_CHART_TYPE_UNSPECIFIED',
        BAR = <any> 'BAR',
        LINE = <any> 'LINE',
        AREA = <any> 'AREA',
        COLUMN = <any> 'COLUMN',
        SCATTER = <any> 'SCATTER',
        COMBO = <any> 'COMBO',
        STEPPEDAREA = <any> 'STEPPED_AREA'
    }
}

/**
 * The specification for a basic chart.  See BasicChartType for the list of charts this supports.
 * @export
 * @interface BasicChartSpec
 */
export interface BasicChartSpec {
    /**
     * The axis on the chart.
     * @type {Array&lt;BasicChartAxis&gt;}
     * @memberof BasicChartSpec
     */
    axis?: Array<BasicChartAxis>;
    /**
     * The type of the chart.
     * @type {string}
     * @memberof BasicChartSpec
     */
    chartType?: BasicChartSpec.ChartTypeEnum;
    /**
     * The behavior of tooltips and data highlighting when hovering on data and chart area.
     * @type {string}
     * @memberof BasicChartSpec
     */
    compareMode?: BasicChartSpec.CompareModeEnum;
    /**
     * The domain of data this is charting. Only a single domain is supported.
     * @type {Array&lt;BasicChartDomain&gt;}
     * @memberof BasicChartSpec
     */
    domains?: Array<BasicChartDomain>;
    /**
     * The number of rows or columns in the data that are \"headers\". If not set, Google Sheets will guess how many rows are headers based on the data.  (Note that BasicChartAxis.title may override the axis title  inferred from the header values.)
     * @type {number}
     * @memberof BasicChartSpec
     */
    headerCount?: number;
    /**
     * If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing).  To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
     * @type {boolean}
     * @memberof BasicChartSpec
     */
    interpolateNulls?: boolean;
    /**
     * The position of the chart legend.
     * @type {string}
     * @memberof BasicChartSpec
     */
    legendPosition?: BasicChartSpec.LegendPositionEnum;
    /**
     * Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
     * @type {boolean}
     * @memberof BasicChartSpec
     */
    lineSmoothing?: boolean;
    /**
     * The data this chart is visualizing.
     * @type {Array&lt;BasicChartSeries&gt;}
     * @memberof BasicChartSpec
     */
    series?: Array<BasicChartSeries>;
    /**
     * The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
     * @type {string}
     * @memberof BasicChartSpec
     */
    stackedType?: BasicChartSpec.StackedTypeEnum;
    /**
     * True to make the chart 3D. Applies to Bar and Column charts.
     * @type {boolean}
     * @memberof BasicChartSpec
     */
    threeDimensional?: boolean;
}

/**
 * @export
 * @namespace BasicChartSpec
 */
export namespace BasicChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum ChartTypeEnum {
        BASICCHARTTYPEUNSPECIFIED = <any> 'BASIC_CHART_TYPE_UNSPECIFIED',
        BAR = <any> 'BAR',
        LINE = <any> 'LINE',
        AREA = <any> 'AREA',
        COLUMN = <any> 'COLUMN',
        SCATTER = <any> 'SCATTER',
        COMBO = <any> 'COMBO',
        STEPPEDAREA = <any> 'STEPPED_AREA'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CompareModeEnum {
        BASICCHARTCOMPAREMODEUNSPECIFIED = <any> 'BASIC_CHART_COMPARE_MODE_UNSPECIFIED',
        DATUM = <any> 'DATUM',
        CATEGORY = <any> 'CATEGORY'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LegendPositionEnum {
        BASICCHARTLEGENDPOSITIONUNSPECIFIED = <any> 'BASIC_CHART_LEGEND_POSITION_UNSPECIFIED',
        BOTTOMLEGEND = <any> 'BOTTOM_LEGEND',
        LEFTLEGEND = <any> 'LEFT_LEGEND',
        RIGHTLEGEND = <any> 'RIGHT_LEGEND',
        TOPLEGEND = <any> 'TOP_LEGEND',
        NOLEGEND = <any> 'NO_LEGEND'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StackedTypeEnum {
        BASICCHARTSTACKEDTYPEUNSPECIFIED = <any> 'BASIC_CHART_STACKED_TYPE_UNSPECIFIED',
        NOTSTACKED = <any> 'NOT_STACKED',
        STACKED = <any> 'STACKED',
        PERCENTSTACKED = <any> 'PERCENT_STACKED'
    }
}

/**
 * The default filter associated with a sheet.
 * @export
 * @interface BasicFilter
 */
export interface BasicFilter {
    /**
     * The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column.
     * @type {{ [key: string]: FilterCriteria; }}
     * @memberof BasicFilter
     */
    criteria?: { [key: string]: FilterCriteria; };
    /**
     * The range the filter covers.
     * @type {GridRange}
     * @memberof BasicFilter
     */
    range?: GridRange;
    /**
     * The sort order per column. Later specifications are used when values are equal in the earlier specifications.
     * @type {Array&lt;SortSpec&gt;}
     * @memberof BasicFilter
     */
    sortSpecs?: Array<SortSpec>;
}

/**
 * The request for clearing more than one range selected by a DataFilter in a spreadsheet.
 * @export
 * @interface BatchClearValuesByDataFilterRequest
 */
export interface BatchClearValuesByDataFilterRequest {
    /**
     * The DataFilters used to determine which ranges to clear.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof BatchClearValuesByDataFilterRequest
     */
    dataFilters?: Array<DataFilter>;
}

/**
 * The response when clearing a range of values selected with DataFilters in a spreadsheet.
 * @export
 * @interface BatchClearValuesByDataFilterResponse
 */
export interface BatchClearValuesByDataFilterResponse {
    /**
     * The ranges that were cleared, in A1 notation. (If the requests were for an unbounded range or a ranger larger  than the bounds of the sheet, this will be the actual ranges  that were cleared, bounded to the sheet's limits.)
     * @type {Array&lt;string&gt;}
     * @memberof BatchClearValuesByDataFilterResponse
     */
    clearedRanges?: Array<string>;
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof BatchClearValuesByDataFilterResponse
     */
    spreadsheetId?: string;
}

/**
 * The request for clearing more than one range of values in a spreadsheet.
 * @export
 * @interface BatchClearValuesRequest
 */
export interface BatchClearValuesRequest {
    /**
     * The ranges to clear, in A1 notation.
     * @type {Array&lt;string&gt;}
     * @memberof BatchClearValuesRequest
     */
    ranges?: Array<string>;
}

/**
 * The response when clearing a range of values in a spreadsheet.
 * @export
 * @interface BatchClearValuesResponse
 */
export interface BatchClearValuesResponse {
    /**
     * The ranges that were cleared, in A1 notation. (If the requests were for an unbounded range or a ranger larger  than the bounds of the sheet, this will be the actual ranges  that were cleared, bounded to the sheet's limits.)
     * @type {Array&lt;string&gt;}
     * @memberof BatchClearValuesResponse
     */
    clearedRanges?: Array<string>;
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof BatchClearValuesResponse
     */
    spreadsheetId?: string;
}

/**
 * The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters.
 * @export
 * @interface BatchGetValuesByDataFilterRequest
 */
export interface BatchGetValuesByDataFilterRequest {
    /**
     * The data filters used to match the ranges of values to retrieve.  Ranges that match any of the specified data filters will be included in the response.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof BatchGetValuesByDataFilterRequest
     */
    dataFilters?: Array<DataFilter>;
    /**
     * How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
     * @type {string}
     * @memberof BatchGetValuesByDataFilterRequest
     */
    dateTimeRenderOption?: BatchGetValuesByDataFilterRequest.DateTimeRenderOptionEnum;
    /**
     * The major dimension that results should use.  For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` will return `[[1,3],[2,4]]`.
     * @type {string}
     * @memberof BatchGetValuesByDataFilterRequest
     */
    majorDimension?: BatchGetValuesByDataFilterRequest.MajorDimensionEnum;
    /**
     * How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @type {string}
     * @memberof BatchGetValuesByDataFilterRequest
     */
    valueRenderOption?: BatchGetValuesByDataFilterRequest.ValueRenderOptionEnum;
}

/**
 * @export
 * @namespace BatchGetValuesByDataFilterRequest
 */
export namespace BatchGetValuesByDataFilterRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum DateTimeRenderOptionEnum {
        SERIALNUMBER = <any> 'SERIAL_NUMBER',
        FORMATTEDSTRING = <any> 'FORMATTED_STRING'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum MajorDimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ValueRenderOptionEnum {
        FORMATTEDVALUE = <any> 'FORMATTED_VALUE',
        UNFORMATTEDVALUE = <any> 'UNFORMATTED_VALUE',
        FORMULA = <any> 'FORMULA'
    }
}

/**
 * The response when retrieving more than one range of values in a spreadsheet selected by DataFilters.
 * @export
 * @interface BatchGetValuesByDataFilterResponse
 */
export interface BatchGetValuesByDataFilterResponse {
    /**
     * The ID of the spreadsheet the data was retrieved from.
     * @type {string}
     * @memberof BatchGetValuesByDataFilterResponse
     */
    spreadsheetId?: string;
    /**
     * The requested values with the list of data filters that matched them.
     * @type {Array&lt;MatchedValueRange&gt;}
     * @memberof BatchGetValuesByDataFilterResponse
     */
    valueRanges?: Array<MatchedValueRange>;
}

/**
 * The response when retrieving more than one range of values in a spreadsheet.
 * @export
 * @interface BatchGetValuesResponse
 */
export interface BatchGetValuesResponse {
    /**
     * The ID of the spreadsheet the data was retrieved from.
     * @type {string}
     * @memberof BatchGetValuesResponse
     */
    spreadsheetId?: string;
    /**
     * The requested values. The order of the ValueRanges is the same as the order of the requested ranges.
     * @type {Array&lt;ValueRange&gt;}
     * @memberof BatchGetValuesResponse
     */
    valueRanges?: Array<ValueRange>;
}

/**
 * The request for updating any aspect of a spreadsheet.
 * @export
 * @interface BatchUpdateSpreadsheetRequest
 */
export interface BatchUpdateSpreadsheetRequest {
    /**
     * Determines if the update response should include the spreadsheet resource.
     * @type {boolean}
     * @memberof BatchUpdateSpreadsheetRequest
     */
    includeSpreadsheetInResponse?: boolean;
    /**
     * A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.
     * @type {Array&lt;Request&gt;}
     * @memberof BatchUpdateSpreadsheetRequest
     */
    requests?: Array<Request>;
    /**
     * True if grid data should be returned. Meaningful only if if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.
     * @type {boolean}
     * @memberof BatchUpdateSpreadsheetRequest
     */
    responseIncludeGridData?: boolean;
    /**
     * Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_response is 'true'.
     * @type {Array&lt;string&gt;}
     * @memberof BatchUpdateSpreadsheetRequest
     */
    responseRanges?: Array<string>;
}

/**
 * The reply for batch updating a spreadsheet.
 * @export
 * @interface BatchUpdateSpreadsheetResponse
 */
export interface BatchUpdateSpreadsheetResponse {
    /**
     * The reply of the updates.  This maps 1:1 with the updates, although replies to some requests may be empty.
     * @type {Array&lt;Response&gt;}
     * @memberof BatchUpdateSpreadsheetResponse
     */
    replies?: Array<GSheetsResponse>;
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof BatchUpdateSpreadsheetResponse
     */
    spreadsheetId?: string;
    /**
     * The spreadsheet after updates were applied. This is only set if [BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response] is `true`.
     * @type {Spreadsheet}
     * @memberof BatchUpdateSpreadsheetResponse
     */
    updatedSpreadsheet?: Spreadsheet;
}

/**
 * The request for updating more than one range of values in a spreadsheet.
 * @export
 * @interface BatchUpdateValuesByDataFilterRequest
 */
export interface BatchUpdateValuesByDataFilterRequest {
    /**
     * The new values to apply to the spreadsheet.  If more than one range is matched by the specified DataFilter the specified values will be applied to all of those ranges.
     * @type {Array&lt;DataFilterValueRange&gt;}
     * @memberof BatchUpdateValuesByDataFilterRequest
     */
    data?: Array<DataFilterValueRange>;
    /**
     * Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses will contain the updated values. If the range to write was larger than than the range actually written, the response will include all values in the requested range (excluding trailing empty rows and columns).
     * @type {boolean}
     * @memberof BatchUpdateValuesByDataFilterRequest
     */
    includeValuesInResponse?: boolean;
    /**
     * Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is DateTimeRenderOption.SERIAL_NUMBER.
     * @type {string}
     * @memberof BatchUpdateValuesByDataFilterRequest
     */
    responseDateTimeRenderOption?: BatchUpdateValuesByDataFilterRequest.ResponseDateTimeRenderOptionEnum;
    /**
     * Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @type {string}
     * @memberof BatchUpdateValuesByDataFilterRequest
     */
    responseValueRenderOption?: BatchUpdateValuesByDataFilterRequest.ResponseValueRenderOptionEnum;
    /**
     * How the input data should be interpreted.
     * @type {string}
     * @memberof BatchUpdateValuesByDataFilterRequest
     */
    valueInputOption?: BatchUpdateValuesByDataFilterRequest.ValueInputOptionEnum;
}

/**
 * @export
 * @namespace BatchUpdateValuesByDataFilterRequest
 */
export namespace BatchUpdateValuesByDataFilterRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum ResponseDateTimeRenderOptionEnum {
        SERIALNUMBER = <any> 'SERIAL_NUMBER',
        FORMATTEDSTRING = <any> 'FORMATTED_STRING'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ResponseValueRenderOptionEnum {
        FORMATTEDVALUE = <any> 'FORMATTED_VALUE',
        UNFORMATTEDVALUE = <any> 'UNFORMATTED_VALUE',
        FORMULA = <any> 'FORMULA'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ValueInputOptionEnum {
        INPUTVALUEOPTIONUNSPECIFIED = <any> 'INPUT_VALUE_OPTION_UNSPECIFIED',
        RAW = <any> 'RAW',
        USERENTERED = <any> 'USER_ENTERED'
    }
}

/**
 * The response when updating a range of values in a spreadsheet.
 * @export
 * @interface BatchUpdateValuesByDataFilterResponse
 */
export interface BatchUpdateValuesByDataFilterResponse {
    /**
     * The response for each range updated.
     * @type {Array&lt;UpdateValuesByDataFilterResponse&gt;}
     * @memberof BatchUpdateValuesByDataFilterResponse
     */
    responses?: Array<UpdateValuesByDataFilterResponse>;
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof BatchUpdateValuesByDataFilterResponse
     */
    spreadsheetId?: string;
    /**
     * The total number of cells updated.
     * @type {number}
     * @memberof BatchUpdateValuesByDataFilterResponse
     */
    totalUpdatedCells?: number;
    /**
     * The total number of columns where at least one cell in the column was updated.
     * @type {number}
     * @memberof BatchUpdateValuesByDataFilterResponse
     */
    totalUpdatedColumns?: number;
    /**
     * The total number of rows where at least one cell in the row was updated.
     * @type {number}
     * @memberof BatchUpdateValuesByDataFilterResponse
     */
    totalUpdatedRows?: number;
    /**
     * The total number of sheets where at least one cell in the sheet was updated.
     * @type {number}
     * @memberof BatchUpdateValuesByDataFilterResponse
     */
    totalUpdatedSheets?: number;
}

/**
 * The request for updating more than one range of values in a spreadsheet.
 * @export
 * @interface BatchUpdateValuesRequest
 */
export interface BatchUpdateValuesRequest {
    /**
     * The new values to apply to the spreadsheet.
     * @type {Array&lt;ValueRange&gt;}
     * @memberof BatchUpdateValuesRequest
     */
    data?: Array<ValueRange>;
    /**
     * Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses will contain the updated values. If the range to write was larger than than the range actually written, the response will include all values in the requested range (excluding trailing empty rows and columns).
     * @type {boolean}
     * @memberof BatchUpdateValuesRequest
     */
    includeValuesInResponse?: boolean;
    /**
     * Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is DateTimeRenderOption.SERIAL_NUMBER.
     * @type {string}
     * @memberof BatchUpdateValuesRequest
     */
    responseDateTimeRenderOption?: BatchUpdateValuesRequest.ResponseDateTimeRenderOptionEnum;
    /**
     * Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @type {string}
     * @memberof BatchUpdateValuesRequest
     */
    responseValueRenderOption?: BatchUpdateValuesRequest.ResponseValueRenderOptionEnum;
    /**
     * How the input data should be interpreted.
     * @type {string}
     * @memberof BatchUpdateValuesRequest
     */
    valueInputOption?: BatchUpdateValuesRequest.ValueInputOptionEnum;
}

/**
 * @export
 * @namespace BatchUpdateValuesRequest
 */
export namespace BatchUpdateValuesRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum ResponseDateTimeRenderOptionEnum {
        SERIALNUMBER = <any> 'SERIAL_NUMBER',
        FORMATTEDSTRING = <any> 'FORMATTED_STRING'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ResponseValueRenderOptionEnum {
        FORMATTEDVALUE = <any> 'FORMATTED_VALUE',
        UNFORMATTEDVALUE = <any> 'UNFORMATTED_VALUE',
        FORMULA = <any> 'FORMULA'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ValueInputOptionEnum {
        INPUTVALUEOPTIONUNSPECIFIED = <any> 'INPUT_VALUE_OPTION_UNSPECIFIED',
        RAW = <any> 'RAW',
        USERENTERED = <any> 'USER_ENTERED'
    }
}

/**
 * The response when updating a range of values in a spreadsheet.
 * @export
 * @interface BatchUpdateValuesResponse
 */
export interface BatchUpdateValuesResponse {
    /**
     * One UpdateValuesResponse per requested range, in the same order as the requests appeared.
     * @type {Array&lt;UpdateValuesResponse&gt;}
     * @memberof BatchUpdateValuesResponse
     */
    responses?: Array<UpdateValuesResponse>;
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof BatchUpdateValuesResponse
     */
    spreadsheetId?: string;
    /**
     * The total number of cells updated.
     * @type {number}
     * @memberof BatchUpdateValuesResponse
     */
    totalUpdatedCells?: number;
    /**
     * The total number of columns where at least one cell in the column was updated.
     * @type {number}
     * @memberof BatchUpdateValuesResponse
     */
    totalUpdatedColumns?: number;
    /**
     * The total number of rows where at least one cell in the row was updated.
     * @type {number}
     * @memberof BatchUpdateValuesResponse
     */
    totalUpdatedRows?: number;
    /**
     * The total number of sheets where at least one cell in the sheet was updated.
     * @type {number}
     * @memberof BatchUpdateValuesResponse
     */
    totalUpdatedSheets?: number;
}

/**
 * A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
 * @export
 * @interface BooleanCondition
 */
export interface BooleanCondition {
    /**
     * The type of condition.
     * @type {string}
     * @memberof BooleanCondition
     */
    type?: BooleanCondition.TypeEnum;
    /**
     * The values of the condition. The number of supported values depends on the condition type.  Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
     * @type {Array&lt;ConditionValue&gt;}
     * @memberof BooleanCondition
     */
    values?: Array<ConditionValue>;
}

/**
 * @export
 * @namespace BooleanCondition
 */
export namespace BooleanCondition {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        CONDITIONTYPEUNSPECIFIED = <any> 'CONDITION_TYPE_UNSPECIFIED',
        NUMBERGREATER = <any> 'NUMBER_GREATER',
        NUMBERGREATERTHANEQ = <any> 'NUMBER_GREATER_THAN_EQ',
        NUMBERLESS = <any> 'NUMBER_LESS',
        NUMBERLESSTHANEQ = <any> 'NUMBER_LESS_THAN_EQ',
        NUMBEREQ = <any> 'NUMBER_EQ',
        NUMBERNOTEQ = <any> 'NUMBER_NOT_EQ',
        NUMBERBETWEEN = <any> 'NUMBER_BETWEEN',
        NUMBERNOTBETWEEN = <any> 'NUMBER_NOT_BETWEEN',
        TEXTCONTAINS = <any> 'TEXT_CONTAINS',
        TEXTNOTCONTAINS = <any> 'TEXT_NOT_CONTAINS',
        TEXTSTARTSWITH = <any> 'TEXT_STARTS_WITH',
        TEXTENDSWITH = <any> 'TEXT_ENDS_WITH',
        TEXTEQ = <any> 'TEXT_EQ',
        TEXTISEMAIL = <any> 'TEXT_IS_EMAIL',
        TEXTISURL = <any> 'TEXT_IS_URL',
        DATEEQ = <any> 'DATE_EQ',
        DATEBEFORE = <any> 'DATE_BEFORE',
        DATEAFTER = <any> 'DATE_AFTER',
        DATEONORBEFORE = <any> 'DATE_ON_OR_BEFORE',
        DATEONORAFTER = <any> 'DATE_ON_OR_AFTER',
        DATEBETWEEN = <any> 'DATE_BETWEEN',
        DATENOTBETWEEN = <any> 'DATE_NOT_BETWEEN',
        DATEISVALID = <any> 'DATE_IS_VALID',
        ONEOFRANGE = <any> 'ONE_OF_RANGE',
        ONEOFLIST = <any> 'ONE_OF_LIST',
        BLANK = <any> 'BLANK',
        NOTBLANK = <any> 'NOT_BLANK',
        CUSTOMFORMULA = <any> 'CUSTOM_FORMULA',
        BOOLEAN = <any> 'BOOLEAN'
    }
}

/**
 * A rule that may or may not match, depending on the condition.
 * @export
 * @interface BooleanRule
 */
export interface BooleanRule {
    /**
     * The condition of the rule. If the condition evaluates to true, the format is applied.
     * @type {BooleanCondition}
     * @memberof BooleanRule
     */
    condition?: BooleanCondition;
    /**
     * The format to apply. Conditional formatting can only apply a subset of formatting: bold, italic, strikethrough, foreground color & background color.
     * @type {CellFormat}
     * @memberof BooleanRule
     */
    format?: CellFormat;
}

/**
 * A border along a cell.
 * @export
 * @interface Border
 */
export interface Border {
    /**
     * The color of the border.
     * @type {Color}
     * @memberof Border
     */
    color?: Color;
    /**
     * The style of the border.
     * @type {string}
     * @memberof Border
     */
    style?: Border.StyleEnum;
    /**
     * The width of the border, in pixels. Deprecated; the width is determined by the \"style\" field.
     * @type {number}
     * @memberof Border
     */
    width?: number;
}

/**
 * @export
 * @namespace Border
 */
export namespace Border {
    /**
     * @export
     * @enum {string}
     */
    export enum StyleEnum {
        STYLEUNSPECIFIED = <any> 'STYLE_UNSPECIFIED',
        DOTTED = <any> 'DOTTED',
        DASHED = <any> 'DASHED',
        SOLID = <any> 'SOLID',
        SOLIDMEDIUM = <any> 'SOLID_MEDIUM',
        SOLIDTHICK = <any> 'SOLID_THICK',
        NONE = <any> 'NONE',
        DOUBLE = <any> 'DOUBLE'
    }
}

/**
 * The borders of the cell.
 * @export
 * @interface Borders
 */
export interface Borders {
    /**
     * The bottom border of the cell.
     * @type {Border}
     * @memberof Borders
     */
    bottom?: Border;
    /**
     * The left border of the cell.
     * @type {Border}
     * @memberof Borders
     */
    left?: Border;
    /**
     * The right border of the cell.
     * @type {Border}
     * @memberof Borders
     */
    right?: Border;
    /**
     * The top border of the cell.
     * @type {Border}
     * @memberof Borders
     */
    top?: Border;
}

/**
 * A <a href=\"/chart/interactive/docs/gallery/bubblechart\">bubble chart</a>.
 * @export
 * @interface BubbleChartSpec
 */
export interface BubbleChartSpec {
    /**
     * The bubble border color.
     * @type {Color}
     * @memberof BubbleChartSpec
     */
    bubbleBorderColor?: Color;
    /**
     * The data containing the bubble labels.  These do not need to be unique.
     * @type {ChartData}
     * @memberof BubbleChartSpec
     */
    bubbleLabels?: ChartData;
    /**
     * The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
     * @type {number}
     * @memberof BubbleChartSpec
     */
    bubbleMaxRadiusSize?: number;
    /**
     * The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
     * @type {number}
     * @memberof BubbleChartSpec
     */
    bubbleMinRadiusSize?: number;
    /**
     * The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
     * @type {number}
     * @memberof BubbleChartSpec
     */
    bubbleOpacity?: number;
    /**
     * The data contianing the bubble sizes.  Bubble sizes are used to draw the bubbles at different sizes relative to each other. If specified, group_ids must also be specified.  This field is optional.
     * @type {ChartData}
     * @memberof BubbleChartSpec
     */
    bubbleSizes?: ChartData;
    /**
     * The format of the text inside the bubbles. Underline and Strikethrough are not supported.
     * @type {TextFormat}
     * @memberof BubbleChartSpec
     */
    bubbleTextStyle?: TextFormat;
    /**
     * The data containing the bubble x-values.  These values locate the bubbles in the chart horizontally.
     * @type {ChartData}
     * @memberof BubbleChartSpec
     */
    domain?: ChartData;
    /**
     * The data containing the bubble group IDs. All bubbles with the same group ID are drawn in the same color. If bubble_sizes is specified then this field must also be specified but may contain blank values. This field is optional.
     * @type {ChartData}
     * @memberof BubbleChartSpec
     */
    groupIds?: ChartData;
    /**
     * Where the legend of the chart should be drawn.
     * @type {string}
     * @memberof BubbleChartSpec
     */
    legendPosition?: BubbleChartSpec.LegendPositionEnum;
    /**
     * The data contianing the bubble y-values.  These values locate the bubbles in the chart vertically.
     * @type {ChartData}
     * @memberof BubbleChartSpec
     */
    series?: ChartData;
}

/**
 * @export
 * @namespace BubbleChartSpec
 */
export namespace BubbleChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum LegendPositionEnum {
        BUBBLECHARTLEGENDPOSITIONUNSPECIFIED = <any> 'BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED',
        BOTTOMLEGEND = <any> 'BOTTOM_LEGEND',
        LEFTLEGEND = <any> 'LEFT_LEGEND',
        RIGHTLEGEND = <any> 'RIGHT_LEGEND',
        TOPLEGEND = <any> 'TOP_LEGEND',
        NOLEGEND = <any> 'NO_LEGEND',
        INSIDELEGEND = <any> 'INSIDE_LEGEND'
    }
}

/**
 * A <a href=\"/chart/interactive/docs/gallery/candlestickchart\">candlestick chart</a>.
 * @export
 * @interface CandlestickChartSpec
 */
export interface CandlestickChartSpec {
    /**
     * The Candlestick chart data. Only one CandlestickData is supported.
     * @type {Array&lt;CandlestickData&gt;}
     * @memberof CandlestickChartSpec
     */
    data?: Array<CandlestickData>;
    /**
     * The domain data (horizontal axis) for the candlestick chart.  String data will be treated as discrete labels, other data will be treated as continuous values.
     * @type {CandlestickDomain}
     * @memberof CandlestickChartSpec
     */
    domain?: CandlestickDomain;
}

/**
 * The Candlestick chart data, each containing the low, open, close, and high values for a series.
 * @export
 * @interface CandlestickData
 */
export interface CandlestickData {
    /**
     * The range data (vertical axis) for the close/final value for each candle. This is the top of the candle body.  If greater than the open value the candle will be filled.  Otherwise the candle will be hollow.
     * @type {CandlestickSeries}
     * @memberof CandlestickData
     */
    closeSeries?: CandlestickSeries;
    /**
     * The range data (vertical axis) for the high/maximum value for each candle. This is the top of the candle's center line.
     * @type {CandlestickSeries}
     * @memberof CandlestickData
     */
    highSeries?: CandlestickSeries;
    /**
     * The range data (vertical axis) for the low/minimum value for each candle. This is the bottom of the candle's center line.
     * @type {CandlestickSeries}
     * @memberof CandlestickData
     */
    lowSeries?: CandlestickSeries;
    /**
     * The range data (vertical axis) for the open/initial value for each candle. This is the bottom of the candle body.  If less than the close value the candle will be filled.  Otherwise the candle will be hollow.
     * @type {CandlestickSeries}
     * @memberof CandlestickData
     */
    openSeries?: CandlestickSeries;
}

/**
 * The domain of a CandlestickChart.
 * @export
 * @interface CandlestickDomain
 */
export interface CandlestickDomain {
    /**
     * The data of the CandlestickDomain.
     * @type {ChartData}
     * @memberof CandlestickDomain
     */
    data?: ChartData;
    /**
     * True to reverse the order of the domain values (horizontal axis).
     * @type {boolean}
     * @memberof CandlestickDomain
     */
    reversed?: boolean;
}

/**
 * The series of a CandlestickData.
 * @export
 * @interface CandlestickSeries
 */
export interface CandlestickSeries {
    /**
     * The data of the CandlestickSeries.
     * @type {ChartData}
     * @memberof CandlestickSeries
     */
    data?: ChartData;
}

/**
 * Data about a specific cell.
 * @export
 * @interface CellData
 */
export interface CellData {
    /**
     * A data validation rule on the cell, if any.  When writing, the new data validation rule will overwrite any prior rule.
     * @type {DataValidationRule}
     * @memberof CellData
     */
    dataValidation?: DataValidationRule;
    /**
     * The effective format being used by the cell. This includes the results of applying any conditional formatting and, if the cell contains a formula, the computed number format. If the effective format is the default format, effective format will not be written. This field is read-only.
     * @type {CellFormat}
     * @memberof CellData
     */
    effectiveFormat?: CellFormat;
    /**
     * The effective value of the cell. For cells with formulas, this is the calculated value.  For cells with literals, this is the same as the user_entered_value. This field is read-only.
     * @type {ExtendedValue}
     * @memberof CellData
     */
    effectiveValue?: ExtendedValue;
    /**
     * The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
     * @type {string}
     * @memberof CellData
     */
    formattedValue?: string;
    /**
     * A hyperlink this cell points to, if any. This field is read-only.  (To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field.)
     * @type {string}
     * @memberof CellData
     */
    hyperlink?: string;
    /**
     * Any note on the cell.
     * @type {string}
     * @memberof CellData
     */
    note?: string;
    /**
     * A pivot table anchored at this cell. The size of pivot table itself is computed dynamically based on its data, grouping, filters, values, etc. Only the top-left cell of the pivot table contains the pivot table definition. The other cells will contain the calculated values of the results of the pivot in their effective_value fields.
     * @type {PivotTable}
     * @memberof CellData
     */
    pivotTable?: PivotTable;
    /**
     * Runs of rich text applied to subsections of the cell.  Runs are only valid on user entered strings, not formulas, bools, or numbers. Runs start at specific indexes in the text and continue until the next run. Properties of a run will continue unless explicitly changed in a subsequent run (and properties of the first run will continue the properties of the cell unless explicitly changed).  When writing, the new runs will overwrite any prior runs.  When writing a new user_entered_value, previous runs are erased.
     * @type {Array&lt;TextFormatRun&gt;}
     * @memberof CellData
     */
    textFormatRuns?: Array<TextFormatRun>;
    /**
     * The format the user entered for the cell.  When writing, the new format will be merged with the existing format.
     * @type {CellFormat}
     * @memberof CellData
     */
    userEnteredFormat?: CellFormat;
    /**
     * The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()` Note: Dates, Times and DateTimes are represented as doubles in serial number format.
     * @type {ExtendedValue}
     * @memberof CellData
     */
    userEnteredValue?: ExtendedValue;
}

/**
 * The format of a cell.
 * @export
 * @interface CellFormat
 */
export interface CellFormat {
    /**
     * The background color of the cell.
     * @type {Color}
     * @memberof CellFormat
     */
    backgroundColor?: Color;
    /**
     * The borders of the cell.
     * @type {Borders}
     * @memberof CellFormat
     */
    borders?: Borders;
    /**
     * The horizontal alignment of the value in the cell.
     * @type {string}
     * @memberof CellFormat
     */
    horizontalAlignment?: CellFormat.HorizontalAlignmentEnum;
    /**
     * How a hyperlink, if it exists, should be displayed in the cell.
     * @type {string}
     * @memberof CellFormat
     */
    hyperlinkDisplayType?: CellFormat.HyperlinkDisplayTypeEnum;
    /**
     * A format describing how number values should be represented to the user.
     * @type {NumberFormat}
     * @memberof CellFormat
     */
    numberFormat?: NumberFormat;
    /**
     * The padding of the cell.
     * @type {Padding}
     * @memberof CellFormat
     */
    padding?: Padding;
    /**
     * The direction of the text in the cell.
     * @type {string}
     * @memberof CellFormat
     */
    textDirection?: CellFormat.TextDirectionEnum;
    /**
     * The format of the text in the cell (unless overridden by a format run).
     * @type {TextFormat}
     * @memberof CellFormat
     */
    textFormat?: TextFormat;
    /**
     * The rotation applied to text in a cell
     * @type {TextRotation}
     * @memberof CellFormat
     */
    textRotation?: TextRotation;
    /**
     * The vertical alignment of the value in the cell.
     * @type {string}
     * @memberof CellFormat
     */
    verticalAlignment?: CellFormat.VerticalAlignmentEnum;
    /**
     * The wrap strategy for the value in the cell.
     * @type {string}
     * @memberof CellFormat
     */
    wrapStrategy?: CellFormat.WrapStrategyEnum;
}

/**
 * @export
 * @namespace CellFormat
 */
export namespace CellFormat {
    /**
     * @export
     * @enum {string}
     */
    export enum HorizontalAlignmentEnum {
        HORIZONTALALIGNUNSPECIFIED = <any> 'HORIZONTAL_ALIGN_UNSPECIFIED',
        LEFT = <any> 'LEFT',
        CENTER = <any> 'CENTER',
        RIGHT = <any> 'RIGHT'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum HyperlinkDisplayTypeEnum {
        HYPERLINKDISPLAYTYPEUNSPECIFIED = <any> 'HYPERLINK_DISPLAY_TYPE_UNSPECIFIED',
        LINKED = <any> 'LINKED',
        PLAINTEXT = <any> 'PLAIN_TEXT'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TextDirectionEnum {
        TEXTDIRECTIONUNSPECIFIED = <any> 'TEXT_DIRECTION_UNSPECIFIED',
        LEFTTORIGHT = <any> 'LEFT_TO_RIGHT',
        RIGHTTOLEFT = <any> 'RIGHT_TO_LEFT'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum VerticalAlignmentEnum {
        VERTICALALIGNUNSPECIFIED = <any> 'VERTICAL_ALIGN_UNSPECIFIED',
        TOP = <any> 'TOP',
        MIDDLE = <any> 'MIDDLE',
        BOTTOM = <any> 'BOTTOM'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum WrapStrategyEnum {
        WRAPSTRATEGYUNSPECIFIED = <any> 'WRAP_STRATEGY_UNSPECIFIED',
        OVERFLOWCELL = <any> 'OVERFLOW_CELL',
        LEGACYWRAP = <any> 'LEGACY_WRAP',
        CLIP = <any> 'CLIP',
        WRAP = <any> 'WRAP'
    }
}

/**
 * The data included in a domain or series.
 * @export
 * @interface ChartData
 */
export interface ChartData {
    /**
     * The source ranges of the data.
     * @type {ChartSourceRange}
     * @memberof ChartData
     */
    sourceRange?: ChartSourceRange;
}

/**
 * Source ranges for a chart.
 * @export
 * @interface ChartSourceRange
 */
export interface ChartSourceRange {
    /**
     * The ranges of data for a series or domain. Exactly one dimension must have a length of 1, and all sources in the list must have the same dimension with length 1. The domain (if it exists) & all series must have the same number of source ranges. If using more than one source range, then the source range at a given offset must be in order and contiguous across the domain and series.  For example, these are valid configurations:      domain sources: A1:A5     series1 sources: B1:B5     series2 sources: D6:D10      domain sources: A1:A5, C10:C12     series1 sources: B1:B5, D10:D12     series2 sources: C1:C5, E10:E12
     * @type {Array&lt;GridRange&gt;}
     * @memberof ChartSourceRange
     */
    sources?: Array<GridRange>;
}

/**
 * The specifications of a chart.
 * @export
 * @interface ChartSpec
 */
export interface ChartSpec {
    /**
     * The alternative text that describes the chart.  This is often used for accessibility.
     * @type {string}
     * @memberof ChartSpec
     */
    altText?: string;
    /**
     * The background color of the entire chart. Not applicable to Org charts.
     * @type {Color}
     * @memberof ChartSpec
     */
    backgroundColor?: Color;
    /**
     * A basic chart specification, can be one of many kinds of charts. See BasicChartType for the list of all charts this supports.
     * @type {BasicChartSpec}
     * @memberof ChartSpec
     */
    basicChart?: BasicChartSpec;
    /**
     * A bubble chart specification.
     * @type {BubbleChartSpec}
     * @memberof ChartSpec
     */
    bubbleChart?: BubbleChartSpec;
    /**
     * A candlestick chart specification.
     * @type {CandlestickChartSpec}
     * @memberof ChartSpec
     */
    candlestickChart?: CandlestickChartSpec;
    /**
     * The name of the font to use by default for all chart text (e.g. title, axis labels, legend).  If a font is specified for a specific part of the chart it will override this font name.
     * @type {string}
     * @memberof ChartSpec
     */
    fontName?: string;
    /**
     * Determines how the charts will use hidden rows or columns.
     * @type {string}
     * @memberof ChartSpec
     */
    hiddenDimensionStrategy?: ChartSpec.HiddenDimensionStrategyEnum;
    /**
     * A histogram chart specification.
     * @type {HistogramChartSpec}
     * @memberof ChartSpec
     */
    histogramChart?: HistogramChartSpec;
    /**
     * True to make a chart fill the entire space in which it's rendered with minimum padding.  False to use the default padding. (Not applicable to Geo and Org charts.)
     * @type {boolean}
     * @memberof ChartSpec
     */
    maximized?: boolean;
    /**
     * An org chart specification.
     * @type {OrgChartSpec}
     * @memberof ChartSpec
     */
    orgChart?: OrgChartSpec;
    /**
     * A pie chart specification.
     * @type {PieChartSpec}
     * @memberof ChartSpec
     */
    pieChart?: PieChartSpec;
    /**
     * The subtitle of the chart.
     * @type {string}
     * @memberof ChartSpec
     */
    subtitle?: string;
    /**
     * The subtitle text format. Strikethrough and underline are not supported.
     * @type {TextFormat}
     * @memberof ChartSpec
     */
    subtitleTextFormat?: TextFormat;
    /**
     * The subtitle text position. This field is optional.
     * @type {TextPosition}
     * @memberof ChartSpec
     */
    subtitleTextPosition?: TextPosition;
    /**
     * The title of the chart.
     * @type {string}
     * @memberof ChartSpec
     */
    title?: string;
    /**
     * The title text format. Strikethrough and underline are not supported.
     * @type {TextFormat}
     * @memberof ChartSpec
     */
    titleTextFormat?: TextFormat;
    /**
     * The title text position. This field is optional.
     * @type {TextPosition}
     * @memberof ChartSpec
     */
    titleTextPosition?: TextPosition;
    /**
     * A treemap chart specification.
     * @type {TreemapChartSpec}
     * @memberof ChartSpec
     */
    treemapChart?: TreemapChartSpec;
    /**
     * A waterfall chart specification.
     * @type {WaterfallChartSpec}
     * @memberof ChartSpec
     */
    waterfallChart?: WaterfallChartSpec;
}

/**
 * @export
 * @namespace ChartSpec
 */
export namespace ChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum HiddenDimensionStrategyEnum {
        CHARTHIDDENDIMENSIONSTRATEGYUNSPECIFIED = <any> 'CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED',
        SKIPHIDDENROWSANDCOLUMNS = <any> 'SKIP_HIDDEN_ROWS_AND_COLUMNS',
        SKIPHIDDENROWS = <any> 'SKIP_HIDDEN_ROWS',
        SKIPHIDDENCOLUMNS = <any> 'SKIP_HIDDEN_COLUMNS',
        SHOWALL = <any> 'SHOW_ALL'
    }
}

/**
 * Clears the basic filter, if any exists on the sheet.
 * @export
 * @interface ClearBasicFilterRequest
 */
export interface ClearBasicFilterRequest {
    /**
     * The sheet ID on which the basic filter should be cleared.
     * @type {number}
     * @memberof ClearBasicFilterRequest
     */
    sheetId?: number;
}

/**
 * The request for clearing a range of values in a spreadsheet.
 * @export
 * @interface ClearValuesRequest
 */
export interface ClearValuesRequest {
}

/**
 * The response when clearing a range of values in a spreadsheet.
 * @export
 * @interface ClearValuesResponse
 */
export interface ClearValuesResponse {
    /**
     * The range (in A1 notation) that was cleared. (If the request was for an unbounded range or a ranger larger  than the bounds of the sheet, this will be the actual range  that was cleared, bounded to the sheet's limits.)
     * @type {string}
     * @memberof ClearValuesResponse
     */
    clearedRange?: string;
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof ClearValuesResponse
     */
    spreadsheetId?: string;
}

/**
 * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness; for example, the fields of this representation can be trivially provided to the constructor of \"java.awt.Color\" in Java; it can also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\" method in iOS; and, with just a little work, it can be easily formatted into a CSS \"rgba()\" string in JavaScript, as well. Here are some examples:  Example (Java):       import com.google.type.Color;       // ...      public static java.awt.Color fromProto(Color protocolor) {        float alpha = protocolor.hasAlpha()            ? protocolor.getAlpha().getValue()            : 1.0;         return new java.awt.Color(            protocolor.getRed(),            protocolor.getGreen(),            protocolor.getBlue(),            alpha);      }       public static Color toProto(java.awt.Color color) {        float red = (float) color.getRed();        float green = (float) color.getGreen();        float blue = (float) color.getBlue();        float denominator = 255.0;        Color.Builder resultBuilder =            Color                .newBuilder()                .setRed(red / denominator)                .setGreen(green / denominator)                .setBlue(blue / denominator);        int alpha = color.getAlpha();        if (alpha != 255) {          result.setAlpha(              FloatValue                  .newBuilder()                  .setValue(((float) alpha) / denominator)                  .build());        }        return resultBuilder.build();      }      // ...  Example (iOS / Obj-C):       // ...      static UIColor* fromProto(Color* protocolor) {         float red = [protocolor red];         float green = [protocolor green];         float blue = [protocolor blue];         FloatValue* alpha_wrapper = [protocolor alpha];         float alpha = 1.0;         if (alpha_wrapper != nil) {           alpha = [alpha_wrapper value];         }         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];      }       static Color* toProto(UIColor* color) {          CGFloat red, green, blue, alpha;          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {            return nil;          }          Color* result = [Color alloc] init];          [result setRed:red];          [result setGreen:green];          [result setBlue:blue];          if (alpha <= 0.9999) {            [result setAlpha:floatWrapperWithValue(alpha)];          }          [result autorelease];          return result;     }     // ...   Example (JavaScript):      // ...      var protoToCssColor = function(rgb_color) {        var redFrac = rgb_color.red || 0.0;        var greenFrac = rgb_color.green || 0.0;        var blueFrac = rgb_color.blue || 0.0;        var red = Math.floor(redFrac * 255);        var green = Math.floor(greenFrac * 255);        var blue = Math.floor(blueFrac * 255);         if (!('alpha' in rgb_color)) {           return rgbToCssColor_(red, green, blue);        }         var alphaFrac = rgb_color.alpha.value || 0.0;        var rgbParams = [red, green, blue].join(',');        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');     };      var rgbToCssColor_ = function(red, green, blue) {       var rgbNumber = new Number((red << 16) | (green << 8) | blue);       var hexString = rgbNumber.toString(16);       var missingZeros = 6 - hexString.length;       var resultBuilder = ['#'];       for (var i = 0; i < missingZeros; i++) {          resultBuilder.push('0');       }       resultBuilder.push(hexString);       return resultBuilder.join('');     };      // ...
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation:    pixel color = alpha * (this color) + (1.0 - alpha) * (background color)  This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is to be rendered as a solid color (as if the alpha value had been explicitly given with a value of 1.0).
     * @type {number}
     * @memberof Color
     */
    alpha?: number;
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     * @type {number}
     * @memberof Color
     */
    blue?: number;
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     * @type {number}
     * @memberof Color
     */
    green?: number;
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     * @type {number}
     * @memberof Color
     */
    red?: number;
}

/**
 * The value of the condition.
 * @export
 * @interface ConditionValue
 */
export interface ConditionValue {
    /**
     * A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER.  Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
     * @type {string}
     * @memberof ConditionValue
     */
    relativeDate?: ConditionValue.RelativeDateEnum;
    /**
     * A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
     * @type {string}
     * @memberof ConditionValue
     */
    userEnteredValue?: string;
}

/**
 * @export
 * @namespace ConditionValue
 */
export namespace ConditionValue {
    /**
     * @export
     * @enum {string}
     */
    export enum RelativeDateEnum {
        RELATIVEDATEUNSPECIFIED = <any> 'RELATIVE_DATE_UNSPECIFIED',
        PASTYEAR = <any> 'PAST_YEAR',
        PASTMONTH = <any> 'PAST_MONTH',
        PASTWEEK = <any> 'PAST_WEEK',
        YESTERDAY = <any> 'YESTERDAY',
        TODAY = <any> 'TODAY',
        TOMORROW = <any> 'TOMORROW'
    }
}

/**
 * A rule describing a conditional format.
 * @export
 * @interface ConditionalFormatRule
 */
export interface ConditionalFormatRule {
    /**
     * The formatting is either \"on\" or \"off\" according to the rule.
     * @type {BooleanRule}
     * @memberof ConditionalFormatRule
     */
    booleanRule?: BooleanRule;
    /**
     * The formatting will vary based on the gradients in the rule.
     * @type {GradientRule}
     * @memberof ConditionalFormatRule
     */
    gradientRule?: GradientRule;
    /**
     * The ranges that are formatted if the condition is true. All the ranges must be on the same grid.
     * @type {Array&lt;GridRange&gt;}
     * @memberof ConditionalFormatRule
     */
    ranges?: Array<GridRange>;
}

/**
 * Copies data from the source to the destination.
 * @export
 * @interface CopyPasteRequest
 */
export interface CopyPasteRequest {
    /**
     * The location to paste to. If the range covers a span that's a multiple of the source's height or width, then the data will be repeated to fill in the destination range. If the range is smaller than the source range, the entire source data will still be copied (beyond the end of the destination range).
     * @type {GridRange}
     * @memberof CopyPasteRequest
     */
    destination?: GridRange;
    /**
     * How that data should be oriented when pasting.
     * @type {string}
     * @memberof CopyPasteRequest
     */
    pasteOrientation?: CopyPasteRequest.PasteOrientationEnum;
    /**
     * What kind of data to paste.
     * @type {string}
     * @memberof CopyPasteRequest
     */
    pasteType?: CopyPasteRequest.PasteTypeEnum;
    /**
     * The source range to copy.
     * @type {GridRange}
     * @memberof CopyPasteRequest
     */
    source?: GridRange;
}

/**
 * @export
 * @namespace CopyPasteRequest
 */
export namespace CopyPasteRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum PasteOrientationEnum {
        NORMAL = <any> 'NORMAL',
        TRANSPOSE = <any> 'TRANSPOSE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum PasteTypeEnum {
        NORMAL = <any> 'PASTE_NORMAL',
        VALUES = <any> 'PASTE_VALUES',
        FORMAT = <any> 'PASTE_FORMAT',
        NOBORDERS = <any> 'PASTE_NO_BORDERS',
        FORMULA = <any> 'PASTE_FORMULA',
        DATAVALIDATION = <any> 'PASTE_DATA_VALIDATION',
        CONDITIONALFORMATTING = <any> 'PASTE_CONDITIONAL_FORMATTING'
    }
}

/**
 * The request to copy a sheet across spreadsheets.
 * @export
 * @interface CopySheetToAnotherSpreadsheetRequest
 */
export interface CopySheetToAnotherSpreadsheetRequest {
    /**
     * The ID of the spreadsheet to copy the sheet to.
     * @type {string}
     * @memberof CopySheetToAnotherSpreadsheetRequest
     */
    destinationSpreadsheetId?: string;
}

/**
 * A request to create developer metadata.
 * @export
 * @interface CreateDeveloperMetadataRequest
 */
export interface CreateDeveloperMetadataRequest {
    /**
     * The developer metadata to create.
     * @type {DeveloperMetadata}
     * @memberof CreateDeveloperMetadataRequest
     */
    developerMetadata?: DeveloperMetadata;
}

/**
 * The response from creating developer metadata.
 * @export
 * @interface CreateDeveloperMetadataResponse
 */
export interface CreateDeveloperMetadataResponse {
    /**
     * The developer metadata that was created.
     * @type {DeveloperMetadata}
     * @memberof CreateDeveloperMetadataResponse
     */
    developerMetadata?: DeveloperMetadata;
}

/**
 * Moves data from the source to the destination.
 * @export
 * @interface CutPasteRequest
 */
export interface CutPasteRequest {
    /**
     * The top-left coordinate where the data should be pasted.
     * @type {GridCoordinate}
     * @memberof CutPasteRequest
     */
    destination?: GridCoordinate;
    /**
     * What kind of data to paste.  All the source data will be cut, regardless of what is pasted.
     * @type {string}
     * @memberof CutPasteRequest
     */
    pasteType?: CutPasteRequest.PasteTypeEnum;
    /**
     * The source data to cut.
     * @type {GridRange}
     * @memberof CutPasteRequest
     */
    source?: GridRange;
}

/**
 * @export
 * @namespace CutPasteRequest
 */
export namespace CutPasteRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum PasteTypeEnum {
        NORMAL = <any> 'PASTE_NORMAL',
        VALUES = <any> 'PASTE_VALUES',
        FORMAT = <any> 'PASTE_FORMAT',
        NOBORDERS = <any> 'PASTE_NO_BORDERS',
        FORMULA = <any> 'PASTE_FORMULA',
        DATAVALIDATION = <any> 'PASTE_DATA_VALIDATION',
        CONDITIONALFORMATTING = <any> 'PASTE_CONDITIONAL_FORMATTING'
    }
}

/**
 * Filter that describes what data should be selected or returned from a request.
 * @export
 * @interface DataFilter
 */
export interface DataFilter {
    /**
     * Selects data that matches the specified A1 range.
     * @type {string}
     * @memberof DataFilter
     */
    a1Range?: string;
    /**
     * Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup.
     * @type {DeveloperMetadataLookup}
     * @memberof DataFilter
     */
    developerMetadataLookup?: DeveloperMetadataLookup;
    /**
     * Selects data that matches the range described by the GridRange.
     * @type {GridRange}
     * @memberof DataFilter
     */
    gridRange?: GridRange;
}

/**
 * A range of values whose location is specified by a DataFilter.
 * @export
 * @interface DataFilterValueRange
 */
export interface DataFilterValueRange {
    /**
     * The data filter describing the location of the values in the spreadsheet.
     * @type {DataFilter}
     * @memberof DataFilterValueRange
     */
    dataFilter?: DataFilter;
    /**
     * The major dimension of the values.
     * @type {string}
     * @memberof DataFilterValueRange
     */
    majorDimension?: DataFilterValueRange.MajorDimensionEnum;
    /**
     * The data to be written.  If the provided values exceed any of the ranges matched by the data filter then the request will fail.  If the provided values are less than the matched ranges only the specified values will be written, existing values in the matched ranges will remain unaffected.
     * @type {Array&lt;Array&lt;ERRORUNKNOWN&gt;&gt;}
     * @memberof DataFilterValueRange
     */
    values?: Array<Array<ERRORUNKNOWN>>;
}

/**
 * @export
 * @namespace DataFilterValueRange
 */
export namespace DataFilterValueRange {
    /**
     * @export
     * @enum {string}
     */
    export enum MajorDimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * A data validation rule.
 * @export
 * @interface DataValidationRule
 */
export interface DataValidationRule {
    /**
     * The condition that data in the cell must match.
     * @type {BooleanCondition}
     * @memberof DataValidationRule
     */
    condition?: BooleanCondition;
    /**
     * A message to show the user when adding data to the cell.
     * @type {string}
     * @memberof DataValidationRule
     */
    inputMessage?: string;
    /**
     * True if the UI should be customized based on the kind of condition. If true, \"List\" conditions will show a dropdown.
     * @type {boolean}
     * @memberof DataValidationRule
     */
    showCustomUi?: boolean;
    /**
     * True if invalid data should be rejected.
     * @type {boolean}
     * @memberof DataValidationRule
     */
    strict?: boolean;
}

/**
 * Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values. For example, consider a pivot table showing sales transactions by date:      +----------+--------------+     | Date     | SUM of Sales |     +----------+--------------+     | 1/1/2017 |      $621.14 |     | 2/3/2017 |      $708.84 |     | 5/8/2017 |      $326.84 |     ...     +----------+--------------+ Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH results in the following pivot table.      +--------------+--------------+     | Grouped Date | SUM of Sales |     +--------------+--------------+     | 2017-Jan     |   $53,731.78 |     | 2017-Feb     |   $83,475.32 |     | 2017-Mar     |   $94,385.05 |     ...     +--------------+--------------+
 * @export
 * @interface DateTimeRule
 */
export interface DateTimeRule {
    /**
     * The type of date-time grouping to apply.
     * @type {string}
     * @memberof DateTimeRule
     */
    type?: DateTimeRule.TypeEnum;
}

/**
 * @export
 * @namespace DateTimeRule
 */
export namespace DateTimeRule {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        DATETIMERULETYPEUNSPECIFIED = <any> 'DATE_TIME_RULE_TYPE_UNSPECIFIED',
        SECOND = <any> 'SECOND',
        MINUTE = <any> 'MINUTE',
        HOUR = <any> 'HOUR',
        HOURMINUTE = <any> 'HOUR_MINUTE',
        HOURMINUTEAMPM = <any> 'HOUR_MINUTE_AMPM',
        DAYOFWEEK = <any> 'DAY_OF_WEEK',
        DAYOFYEAR = <any> 'DAY_OF_YEAR',
        DAYOFMONTH = <any> 'DAY_OF_MONTH',
        DAYMONTH = <any> 'DAY_MONTH',
        MONTH = <any> 'MONTH',
        QUARTER = <any> 'QUARTER',
        YEAR = <any> 'YEAR',
        YEARMONTH = <any> 'YEAR_MONTH',
        YEARQUARTER = <any> 'YEAR_QUARTER',
        YEARMONTHDAY = <any> 'YEAR_MONTH_DAY'
    }
}

/**
 * Removes the banded range with the given ID from the spreadsheet.
 * @export
 * @interface DeleteBandingRequest
 */
export interface DeleteBandingRequest {
    /**
     * The ID of the banded range to delete.
     * @type {number}
     * @memberof DeleteBandingRequest
     */
    bandedRangeId?: number;
}

/**
 * Deletes a conditional format rule at the given index. All subsequent rules' indexes are decremented.
 * @export
 * @interface DeleteConditionalFormatRuleRequest
 */
export interface DeleteConditionalFormatRuleRequest {
    /**
     * The zero-based index of the rule to be deleted.
     * @type {number}
     * @memberof DeleteConditionalFormatRuleRequest
     */
    index?: number;
    /**
     * The sheet the rule is being deleted from.
     * @type {number}
     * @memberof DeleteConditionalFormatRuleRequest
     */
    sheetId?: number;
}

/**
 * The result of deleting a conditional format rule.
 * @export
 * @interface DeleteConditionalFormatRuleResponse
 */
export interface DeleteConditionalFormatRuleResponse {
    /**
     * The rule that was deleted.
     * @type {ConditionalFormatRule}
     * @memberof DeleteConditionalFormatRuleResponse
     */
    rule?: ConditionalFormatRule;
}

/**
 * A request to delete developer metadata.
 * @export
 * @interface DeleteDeveloperMetadataRequest
 */
export interface DeleteDeveloperMetadataRequest {
    /**
     * The data filter describing the criteria used to select which developer metadata entry to delete.
     * @type {DataFilter}
     * @memberof DeleteDeveloperMetadataRequest
     */
    dataFilter?: DataFilter;
}

/**
 * The response from deleting developer metadata.
 * @export
 * @interface DeleteDeveloperMetadataResponse
 */
export interface DeleteDeveloperMetadataResponse {
    /**
     * The metadata that was deleted.
     * @type {Array&lt;DeveloperMetadata&gt;}
     * @memberof DeleteDeveloperMetadataResponse
     */
    deletedDeveloperMetadata?: Array<DeveloperMetadata>;
}

/**
 * Deletes a group over the specified range by decrementing the depth of the dimensions in the range.  For example, assume the sheet has a depth-1 group over B:E and a depth-2 group over C:D. Deleting a group over D:E leaves the sheet with a depth-1 group over B:D and a depth-2 group over C:C.
 * @export
 * @interface DeleteDimensionGroupRequest
 */
export interface DeleteDimensionGroupRequest {
    /**
     * The range of the group to be deleted.
     * @type {DimensionRange}
     * @memberof DeleteDimensionGroupRequest
     */
    range?: DimensionRange;
}

/**
 * The result of deleting a group.
 * @export
 * @interface DeleteDimensionGroupResponse
 */
export interface DeleteDimensionGroupResponse {
    /**
     * All groups of a dimension after deleting a group from that dimension.
     * @type {Array&lt;DimensionGroup&gt;}
     * @memberof DeleteDimensionGroupResponse
     */
    dimensionGroups?: Array<DimensionGroup>;
}

/**
 * Deletes the dimensions from the sheet.
 * @export
 * @interface DeleteDimensionRequest
 */
export interface DeleteDimensionRequest {
    /**
     * The dimensions to delete from the sheet.
     * @type {DimensionRange}
     * @memberof DeleteDimensionRequest
     */
    range?: DimensionRange;
}

/**
 * Deletes the embedded object with the given ID.
 * @export
 * @interface DeleteEmbeddedObjectRequest
 */
export interface DeleteEmbeddedObjectRequest {
    /**
     * The ID of the embedded object to delete.
     * @type {number}
     * @memberof DeleteEmbeddedObjectRequest
     */
    objectId?: number;
}

/**
 * Deletes a particular filter view.
 * @export
 * @interface DeleteFilterViewRequest
 */
export interface DeleteFilterViewRequest {
    /**
     * The ID of the filter to delete.
     * @type {number}
     * @memberof DeleteFilterViewRequest
     */
    filterId?: number;
}

/**
 * Removes the named range with the given ID from the spreadsheet.
 * @export
 * @interface DeleteNamedRangeRequest
 */
export interface DeleteNamedRangeRequest {
    /**
     * The ID of the named range to delete.
     * @type {string}
     * @memberof DeleteNamedRangeRequest
     */
    namedRangeId?: string;
}

/**
 * Deletes the protected range with the given ID.
 * @export
 * @interface DeleteProtectedRangeRequest
 */
export interface DeleteProtectedRangeRequest {
    /**
     * The ID of the protected range to delete.
     * @type {number}
     * @memberof DeleteProtectedRangeRequest
     */
    protectedRangeId?: number;
}

/**
 * Deletes a range of cells, shifting other cells into the deleted area.
 * @export
 * @interface DeleteRangeRequest
 */
export interface DeleteRangeRequest {
    /**
     * The range of cells to delete.
     * @type {GridRange}
     * @memberof DeleteRangeRequest
     */
    range?: GridRange;
    /**
     * The dimension from which deleted cells will be replaced with. If ROWS, existing cells will be shifted upward to replace the deleted cells. If COLUMNS, existing cells will be shifted left to replace the deleted cells.
     * @type {string}
     * @memberof DeleteRangeRequest
     */
    shiftDimension?: DeleteRangeRequest.ShiftDimensionEnum;
}

/**
 * @export
 * @namespace DeleteRangeRequest
 */
export namespace DeleteRangeRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum ShiftDimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * Deletes the requested sheet.
 * @export
 * @interface DeleteSheetRequest
 */
export interface DeleteSheetRequest {
    /**
     * The ID of the sheet to delete.
     * @type {number}
     * @memberof DeleteSheetRequest
     */
    sheetId?: number;
}

/**
 * Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited.  For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
 * @export
 * @interface DeveloperMetadata
 */
export interface DeveloperMetadata {
    /**
     * The location where the metadata is associated.
     * @type {DeveloperMetadataLocation}
     * @memberof DeveloperMetadata
     */
    location?: DeveloperMetadataLocation;
    /**
     * The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.
     * @type {number}
     * @memberof DeveloperMetadata
     */
    metadataId?: number;
    /**
     * The metadata key. There may be multiple metadata in a spreadsheet with the same key.  Developer metadata must always have a key specified.
     * @type {string}
     * @memberof DeveloperMetadata
     */
    metadataKey?: string;
    /**
     * Data associated with the metadata's key.
     * @type {string}
     * @memberof DeveloperMetadata
     */
    metadataValue?: string;
    /**
     * The metadata visibility.  Developer metadata must always have a visibility specified.
     * @type {string}
     * @memberof DeveloperMetadata
     */
    visibility?: DeveloperMetadata.VisibilityEnum;
}

/**
 * @export
 * @namespace DeveloperMetadata
 */
export namespace DeveloperMetadata {
    /**
     * @export
     * @enum {string}
     */
    export enum VisibilityEnum {
        DEVELOPERMETADATAVISIBILITYUNSPECIFIED = <any> 'DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED',
        DOCUMENT = <any> 'DOCUMENT',
        PROJECT = <any> 'PROJECT'
    }
}

/**
 * A location where metadata may be associated in a spreadsheet.
 * @export
 * @interface DeveloperMetadataLocation
 */
export interface DeveloperMetadataLocation {
    /**
     * Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns.
     * @type {DimensionRange}
     * @memberof DeveloperMetadataLocation
     */
    dimensionRange?: DimensionRange;
    /**
     * The type of location this object represents.  This field is read-only.
     * @type {string}
     * @memberof DeveloperMetadataLocation
     */
    locationType?: DeveloperMetadataLocation.LocationTypeEnum;
    /**
     * The ID of the sheet when metadata is associated with an entire sheet.
     * @type {number}
     * @memberof DeveloperMetadataLocation
     */
    sheetId?: number;
    /**
     * True when metadata is associated with an entire spreadsheet.
     * @type {boolean}
     * @memberof DeveloperMetadataLocation
     */
    spreadsheet?: boolean;
}

/**
 * @export
 * @namespace DeveloperMetadataLocation
 */
export namespace DeveloperMetadataLocation {
    /**
     * @export
     * @enum {string}
     */
    export enum LocationTypeEnum {
        DEVELOPERMETADATALOCATIONTYPEUNSPECIFIED = <any> 'DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED',
        ROW = <any> 'ROW',
        COLUMN = <any> 'COLUMN',
        SHEET = <any> 'SHEET',
        SPREADSHEET = <any> 'SPREADSHEET'
    }
}

/**
 * Selects DeveloperMetadata that matches all of the specified fields.  For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key.  If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type.  In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
 * @export
 * @interface DeveloperMetadataLookup
 */
export interface DeveloperMetadataLookup {
    /**
     * Determines how this lookup matches the location.  If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched.  If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched.  If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
     * @type {string}
     * @memberof DeveloperMetadataLookup
     */
    locationMatchingStrategy?: DeveloperMetadataLookup.LocationMatchingStrategyEnum;
    /**
     * Limits the selected developer metadata to those entries which are associated with locations of the specified type.  For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows.  If the field is left unspecified, all location types are considered.  This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location.  This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
     * @type {string}
     * @memberof DeveloperMetadataLookup
     */
    locationType?: DeveloperMetadataLookup.LocationTypeEnum;
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
     * @type {number}
     * @memberof DeveloperMetadataLookup
     */
    metadataId?: number;
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
     * @type {string}
     * @memberof DeveloperMetadataLookup
     */
    metadataKey?: string;
    /**
     * Limits the selected developer metadata to those entries associated with the specified location.  This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy.
     * @type {DeveloperMetadataLocation}
     * @memberof DeveloperMetadataLookup
     */
    metadataLocation?: DeveloperMetadataLocation;
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
     * @type {string}
     * @memberof DeveloperMetadataLookup
     */
    metadataValue?: string;
    /**
     * Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility.  If left unspecified, all developer metadata visibile to the requesting project is considered.
     * @type {string}
     * @memberof DeveloperMetadataLookup
     */
    visibility?: DeveloperMetadataLookup.VisibilityEnum;
}

/**
 * @export
 * @namespace DeveloperMetadataLookup
 */
export namespace DeveloperMetadataLookup {
    /**
     * @export
     * @enum {string}
     */
    export enum LocationMatchingStrategyEnum {
        DEVELOPERMETADATALOCATIONMATCHINGSTRATEGYUNSPECIFIED = <any> 'DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED',
        EXACTLOCATION = <any> 'EXACT_LOCATION',
        INTERSECTINGLOCATION = <any> 'INTERSECTING_LOCATION'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LocationTypeEnum {
        DEVELOPERMETADATALOCATIONTYPEUNSPECIFIED = <any> 'DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED',
        ROW = <any> 'ROW',
        COLUMN = <any> 'COLUMN',
        SHEET = <any> 'SHEET',
        SPREADSHEET = <any> 'SPREADSHEET'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum VisibilityEnum {
        DEVELOPERMETADATAVISIBILITYUNSPECIFIED = <any> 'DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED',
        DOCUMENT = <any> 'DOCUMENT',
        PROJECT = <any> 'PROJECT'
    }
}

/**
 * A group over an interval of rows or columns on a sheet, which can contain or be contained within other groups. A group can be collapsed or expanded as a unit on the sheet.
 * @export
 * @interface DimensionGroup
 */
export interface DimensionGroup {
    /**
     * This field is true if this group is collapsed. A collapsed group remains collapsed if an overlapping group at a shallower depth is expanded.  A true value does not imply that all dimensions within the group are hidden, since a dimension's visibility can change independently from this group property. However, when this property is updated, all dimensions within it are set to hidden if this field is true, or set to visible if this field is false.
     * @type {boolean}
     * @memberof DimensionGroup
     */
    collapsed?: boolean;
    /**
     * The depth of the group, representing how many groups have a range that wholly contains the range of this group.
     * @type {number}
     * @memberof DimensionGroup
     */
    depth?: number;
    /**
     * The range over which this group exists.
     * @type {DimensionRange}
     * @memberof DimensionGroup
     */
    range?: DimensionRange;
}

/**
 * Properties about a dimension.
 * @export
 * @interface DimensionProperties
 */
export interface DimensionProperties {
    /**
     * The developer metadata associated with a single row or column.
     * @type {Array&lt;DeveloperMetadata&gt;}
     * @memberof DimensionProperties
     */
    developerMetadata?: Array<DeveloperMetadata>;
    /**
     * True if this dimension is being filtered. This field is read-only.
     * @type {boolean}
     * @memberof DimensionProperties
     */
    hiddenByFilter?: boolean;
    /**
     * True if this dimension is explicitly hidden.
     * @type {boolean}
     * @memberof DimensionProperties
     */
    hiddenByUser?: boolean;
    /**
     * The height (if a row) or width (if a column) of the dimension in pixels.
     * @type {number}
     * @memberof DimensionProperties
     */
    pixelSize?: number;
}

/**
 * A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
 * @export
 * @interface DimensionRange
 */
export interface DimensionRange {
    /**
     * The dimension of the span.
     * @type {string}
     * @memberof DimensionRange
     */
    dimension?: DimensionRange.DimensionEnum;
    /**
     * The end (exclusive) of the span, or not set if unbounded.
     * @type {number}
     * @memberof DimensionRange
     */
    endIndex?: number;
    /**
     * The sheet this span is on.
     * @type {number}
     * @memberof DimensionRange
     */
    sheetId?: number;
    /**
     * The start (inclusive) of the span, or not set if unbounded.
     * @type {number}
     * @memberof DimensionRange
     */
    startIndex?: number;
}

/**
 * @export
 * @namespace DimensionRange
 */
export namespace DimensionRange {
    /**
     * @export
     * @enum {string}
     */
    export enum DimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * Duplicates a particular filter view.
 * @export
 * @interface DuplicateFilterViewRequest
 */
export interface DuplicateFilterViewRequest {
    /**
     * The ID of the filter being duplicated.
     * @type {number}
     * @memberof DuplicateFilterViewRequest
     */
    filterId?: number;
}

/**
 * The result of a filter view being duplicated.
 * @export
 * @interface DuplicateFilterViewResponse
 */
export interface DuplicateFilterViewResponse {
    /**
     * The newly created filter.
     * @type {FilterView}
     * @memberof DuplicateFilterViewResponse
     */
    filter?: FilterView;
}

/**
 * Duplicates the contents of a sheet.
 * @export
 * @interface DuplicateSheetRequest
 */
export interface DuplicateSheetRequest {
    /**
     * The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.
     * @type {number}
     * @memberof DuplicateSheetRequest
     */
    insertSheetIndex?: number;
    /**
     * If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.
     * @type {number}
     * @memberof DuplicateSheetRequest
     */
    newSheetId?: number;
    /**
     * The name of the new sheet.  If empty, a new name is chosen for you.
     * @type {string}
     * @memberof DuplicateSheetRequest
     */
    newSheetName?: string;
    /**
     * The sheet to duplicate.
     * @type {number}
     * @memberof DuplicateSheetRequest
     */
    sourceSheetId?: number;
}

/**
 * The result of duplicating a sheet.
 * @export
 * @interface DuplicateSheetResponse
 */
export interface DuplicateSheetResponse {
    /**
     * The properties of the duplicate sheet.
     * @type {SheetProperties}
     * @memberof DuplicateSheetResponse
     */
    properties?: SheetProperties;
}

/**
 * The editors of a protected range.
 * @export
 * @interface Editors
 */
export interface Editors {
    /**
     * True if anyone in the document's domain has edit access to the protected range.  Domain protection is only supported on documents within a domain.
     * @type {boolean}
     * @memberof Editors
     */
    domainUsersCanEdit?: boolean;
    /**
     * The email addresses of groups with edit access to the protected range.
     * @type {Array&lt;string&gt;}
     * @memberof Editors
     */
    groups?: Array<string>;
    /**
     * The email addresses of users with edit access to the protected range.
     * @type {Array&lt;string&gt;}
     * @memberof Editors
     */
    users?: Array<string>;
}

/**
 * A chart embedded in a sheet.
 * @export
 * @interface EmbeddedChart
 */
export interface EmbeddedChart {
    /**
     * The ID of the chart.
     * @type {number}
     * @memberof EmbeddedChart
     */
    chartId?: number;
    /**
     * The position of the chart.
     * @type {EmbeddedObjectPosition}
     * @memberof EmbeddedChart
     */
    position?: EmbeddedObjectPosition;
    /**
     * The specification of the chart.
     * @type {ChartSpec}
     * @memberof EmbeddedChart
     */
    spec?: ChartSpec;
}

/**
 * The position of an embedded object such as a chart.
 * @export
 * @interface EmbeddedObjectPosition
 */
export interface EmbeddedObjectPosition {
    /**
     * If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.
     * @type {boolean}
     * @memberof EmbeddedObjectPosition
     */
    newSheet?: boolean;
    /**
     * The position at which the object is overlaid on top of a grid.
     * @type {OverlayPosition}
     * @memberof EmbeddedObjectPosition
     */
    overlayPosition?: OverlayPosition;
    /**
     * The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.
     * @type {number}
     * @memberof EmbeddedObjectPosition
     */
    sheetId?: number;
}

/**
 * An error in a cell.
 * @export
 * @interface ErrorValue
 */
export interface ErrorValue {
    /**
     * A message with more information about the error (in the spreadsheet's locale).
     * @type {string}
     * @memberof ErrorValue
     */
    message?: string;
    /**
     * The type of error.
     * @type {string}
     * @memberof ErrorValue
     */
    type?: ErrorValue.TypeEnum;
}

/**
 * @export
 * @namespace ErrorValue
 */
export namespace ErrorValue {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        ERRORTYPEUNSPECIFIED = <any> 'ERROR_TYPE_UNSPECIFIED',
        ERROR = <any> 'ERROR',
        NULLVALUE = <any> 'NULL_VALUE',
        DIVIDEBYZERO = <any> 'DIVIDE_BY_ZERO',
        VALUE = <any> 'VALUE',
        REF = <any> 'REF',
        NAME = <any> 'NAME',
        NUM = <any> 'NUM',
        NA = <any> 'N_A',
        LOADING = <any> 'LOADING'
    }
}

/**
 * The kinds of value that a cell in a spreadsheet can have.
 * @export
 * @interface ExtendedValue
 */
export interface ExtendedValue {
    /**
     * Represents a boolean value.
     * @type {boolean}
     * @memberof ExtendedValue
     */
    boolValue?: boolean;
    /**
     * Represents an error. This field is read-only.
     * @type {ErrorValue}
     * @memberof ExtendedValue
     */
    errorValue?: ErrorValue;
    /**
     * Represents a formula.
     * @type {string}
     * @memberof ExtendedValue
     */
    formulaValue?: string;
    /**
     * Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in \"serial number\" format.
     * @type {number}
     * @memberof ExtendedValue
     */
    numberValue?: number;
    /**
     * Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `\"123\"`.
     * @type {string}
     * @memberof ExtendedValue
     */
    stringValue?: string;
}

/**
 * Criteria for showing/hiding rows in a filter or filter view.
 * @export
 * @interface FilterCriteria
 */
export interface FilterCriteria {
    /**
     * A condition that must be true for values to be shown. (This does not override hiddenValues -- if a value is listed there,  it will still be hidden.)
     * @type {BooleanCondition}
     * @memberof FilterCriteria
     */
    condition?: BooleanCondition;
    /**
     * Values that should be hidden.
     * @type {Array&lt;string&gt;}
     * @memberof FilterCriteria
     */
    hiddenValues?: Array<string>;
}

/**
 * A filter view.
 * @export
 * @interface FilterView
 */
export interface FilterView {
    /**
     * The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column.
     * @type {{ [key: string]: FilterCriteria; }}
     * @memberof FilterView
     */
    criteria?: { [key: string]: FilterCriteria; };
    /**
     * The ID of the filter view.
     * @type {number}
     * @memberof FilterView
     */
    filterViewId?: number;
    /**
     * The named range this filter view is backed by, if any.  When writing, only one of range or named_range_id may be set.
     * @type {string}
     * @memberof FilterView
     */
    namedRangeId?: string;
    /**
     * The range this filter view covers.  When writing, only one of range or named_range_id may be set.
     * @type {GridRange}
     * @memberof FilterView
     */
    range?: GridRange;
    /**
     * The sort order per column. Later specifications are used when values are equal in the earlier specifications.
     * @type {Array&lt;SortSpec&gt;}
     * @memberof FilterView
     */
    sortSpecs?: Array<SortSpec>;
    /**
     * The name of the filter view.
     * @type {string}
     * @memberof FilterView
     */
    title?: string;
}

/**
 * Finds and replaces data in cells over a range, sheet, or all sheets.
 * @export
 * @interface FindReplaceRequest
 */
export interface FindReplaceRequest {
    /**
     * True to find/replace over all sheets.
     * @type {boolean}
     * @memberof FindReplaceRequest
     */
    allSheets?: boolean;
    /**
     * The value to search.
     * @type {string}
     * @memberof FindReplaceRequest
     */
    find?: string;
    /**
     * True if the search should include cells with formulas. False to skip cells with formulas.
     * @type {boolean}
     * @memberof FindReplaceRequest
     */
    includeFormulas?: boolean;
    /**
     * True if the search is case sensitive.
     * @type {boolean}
     * @memberof FindReplaceRequest
     */
    matchCase?: boolean;
    /**
     * True if the find value should match the entire cell.
     * @type {boolean}
     * @memberof FindReplaceRequest
     */
    matchEntireCell?: boolean;
    /**
     * The range to find/replace over.
     * @type {GridRange}
     * @memberof FindReplaceRequest
     */
    range?: GridRange;
    /**
     * The value to use as the replacement.
     * @type {string}
     * @memberof FindReplaceRequest
     */
    replacement?: string;
    /**
     * True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `\"Google Sheets\"` and another has `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of `\"$1 Rocks\"` would change the contents of the cells to `\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.
     * @type {boolean}
     * @memberof FindReplaceRequest
     */
    searchByRegex?: boolean;
    /**
     * The sheet to find/replace over.
     * @type {number}
     * @memberof FindReplaceRequest
     */
    sheetId?: number;
}

/**
 * The result of the find/replace.
 * @export
 * @interface FindReplaceResponse
 */
export interface FindReplaceResponse {
    /**
     * The number of formula cells changed.
     * @type {number}
     * @memberof FindReplaceResponse
     */
    formulasChanged?: number;
    /**
     * The number of occurrences (possibly multiple within a cell) changed. For example, if replacing `\"e\"` with `\"o\"` in `\"Google Sheets\"`, this would be `\"3\"` because `\"Google Sheets\"` -> `\"Googlo Shoots\"`.
     * @type {number}
     * @memberof FindReplaceResponse
     */
    occurrencesChanged?: number;
    /**
     * The number of rows changed.
     * @type {number}
     * @memberof FindReplaceResponse
     */
    rowsChanged?: number;
    /**
     * The number of sheets changed.
     * @type {number}
     * @memberof FindReplaceResponse
     */
    sheetsChanged?: number;
    /**
     * The number of non-formula cells changed.
     * @type {number}
     * @memberof FindReplaceResponse
     */
    valuesChanged?: number;
}

/**
 * The request for retrieving a Spreadsheet.
 * @export
 * @interface GetSpreadsheetByDataFilterRequest
 */
export interface GetSpreadsheetByDataFilterRequest {
    /**
     * The DataFilters used to select which ranges to retrieve from the spreadsheet.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof GetSpreadsheetByDataFilterRequest
     */
    dataFilters?: Array<DataFilter>;
    /**
     * True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
     * @type {boolean}
     * @memberof GetSpreadsheetByDataFilterRequest
     */
    includeGridData?: boolean;
}

/**
 * A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points.
 * @export
 * @interface GradientRule
 */
export interface GradientRule {
    /**
     * The final interpolation point.
     * @type {InterpolationPoint}
     * @memberof GradientRule
     */
    maxpoint?: InterpolationPoint;
    /**
     * An optional midway interpolation point.
     * @type {InterpolationPoint}
     * @memberof GradientRule
     */
    midpoint?: InterpolationPoint;
    /**
     * The starting interpolation point.
     * @type {InterpolationPoint}
     * @memberof GradientRule
     */
    minpoint?: InterpolationPoint;
}

/**
 * A coordinate in a sheet. All indexes are zero-based.
 * @export
 * @interface GridCoordinate
 */
export interface GridCoordinate {
    /**
     * The column index of the coordinate.
     * @type {number}
     * @memberof GridCoordinate
     */
    columnIndex?: number;
    /**
     * The row index of the coordinate.
     * @type {number}
     * @memberof GridCoordinate
     */
    rowIndex?: number;
    /**
     * The sheet this coordinate is on.
     * @type {number}
     * @memberof GridCoordinate
     */
    sheetId?: number;
}

/**
 * Data in the grid, as well as metadata about the dimensions.
 * @export
 * @interface GridData
 */
export interface GridData {
    /**
     * Metadata about the requested columns in the grid, starting with the column in start_column.
     * @type {Array&lt;DimensionProperties&gt;}
     * @memberof GridData
     */
    columnMetadata?: Array<DimensionProperties>;
    /**
     * The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
     * @type {Array&lt;RowData&gt;}
     * @memberof GridData
     */
    rowData?: Array<RowData>;
    /**
     * Metadata about the requested rows in the grid, starting with the row in start_row.
     * @type {Array&lt;DimensionProperties&gt;}
     * @memberof GridData
     */
    rowMetadata?: Array<DimensionProperties>;
    /**
     * The first column this GridData refers to, zero-based.
     * @type {number}
     * @memberof GridData
     */
    startColumn?: number;
    /**
     * The first row this GridData refers to, zero-based.
     * @type {number}
     * @memberof GridData
     */
    startRow?: number;
}

/**
 * Properties of a grid.
 * @export
 * @interface GridProperties
 */
export interface GridProperties {
    /**
     * The number of columns in the grid.
     * @type {number}
     * @memberof GridProperties
     */
    columnCount?: number;
    /**
     * True if the column grouping control toggle is shown after the group.
     * @type {boolean}
     * @memberof GridProperties
     */
    columnGroupControlAfter?: boolean;
    /**
     * The number of columns that are frozen in the grid.
     * @type {number}
     * @memberof GridProperties
     */
    frozenColumnCount?: number;
    /**
     * The number of rows that are frozen in the grid.
     * @type {number}
     * @memberof GridProperties
     */
    frozenRowCount?: number;
    /**
     * True if the grid isn't showing gridlines in the UI.
     * @type {boolean}
     * @memberof GridProperties
     */
    hideGridlines?: boolean;
    /**
     * The number of rows in the grid.
     * @type {number}
     * @memberof GridProperties
     */
    rowCount?: number;
    /**
     * True if the row grouping control toggle is shown after the group.
     * @type {boolean}
     * @memberof GridProperties
     */
    rowGroupControlAfter?: boolean;
}

/**
 * A range on a sheet. All indexes are zero-based. Indexes are half open, e.g the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side.  For example, if `\"Sheet1\"` is sheet ID 0, then:    `Sheet1!A1:A1 == sheet_id: 0,                   start_row_index: 0, end_row_index: 1,                   start_column_index: 0, end_column_index: 1`    `Sheet1!A3:B4 == sheet_id: 0,                   start_row_index: 2, end_row_index: 4,                   start_column_index: 0, end_column_index: 2`    `Sheet1!A:B == sheet_id: 0,                 start_column_index: 0, end_column_index: 2`    `Sheet1!A5:B == sheet_id: 0,                  start_row_index: 4,                  start_column_index: 0, end_column_index: 2`    `Sheet1 == sheet_id:0`  The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
 * @export
 * @interface GridRange
 */
export interface GridRange {
    /**
     * The end column (exclusive) of the range, or not set if unbounded.
     * @type {number}
     * @memberof GridRange
     */
    endColumnIndex?: number;
    /**
     * The end row (exclusive) of the range, or not set if unbounded.
     * @type {number}
     * @memberof GridRange
     */
    endRowIndex?: number;
    /**
     * The sheet this range is on.
     * @type {number}
     * @memberof GridRange
     */
    sheetId?: number;
    /**
     * The start column (inclusive) of the range, or not set if unbounded.
     * @type {number}
     * @memberof GridRange
     */
    startColumnIndex?: number;
    /**
     * The start row (inclusive) of the range, or not set if unbounded.
     * @type {number}
     * @memberof GridRange
     */
    startRowIndex?: number;
}

/**
 * A <a href=\"/chart/interactive/docs/gallery/histogram\">histogram chart</a>. A histogram chart groups data items into bins, displaying each bin as a column of stacked items.  Histograms are used to display the distribution of a dataset.  Each column of items represents a range into which those items fall.  The number of bins can be chosen automatically or specified explicitly.
 * @export
 * @interface HistogramChartSpec
 */
export interface HistogramChartSpec {
    /**
     * By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
     * @type {number}
     * @memberof HistogramChartSpec
     */
    bucketSize?: number;
    /**
     * The position of the chart legend.
     * @type {string}
     * @memberof HistogramChartSpec
     */
    legendPosition?: HistogramChartSpec.LegendPositionEnum;
    /**
     * The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes.  For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets.  The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
     * @type {number}
     * @memberof HistogramChartSpec
     */
    outlierPercentile?: number;
    /**
     * The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
     * @type {Array&lt;HistogramSeries&gt;}
     * @memberof HistogramChartSpec
     */
    series?: Array<HistogramSeries>;
    /**
     * Whether horizontal divider lines should be displayed between items in each column.
     * @type {boolean}
     * @memberof HistogramChartSpec
     */
    showItemDividers?: boolean;
}

/**
 * @export
 * @namespace HistogramChartSpec
 */
export namespace HistogramChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum LegendPositionEnum {
        HISTOGRAMCHARTLEGENDPOSITIONUNSPECIFIED = <any> 'HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED',
        BOTTOMLEGEND = <any> 'BOTTOM_LEGEND',
        LEFTLEGEND = <any> 'LEFT_LEGEND',
        RIGHTLEGEND = <any> 'RIGHT_LEGEND',
        TOPLEGEND = <any> 'TOP_LEGEND',
        NOLEGEND = <any> 'NO_LEGEND',
        INSIDELEGEND = <any> 'INSIDE_LEGEND'
    }
}

/**
 * Allows you to organize the numeric values in a source data column into buckets of a constant size. All values from HistogramRule.start to HistogramRule.end are placed into groups of size HistogramRule.interval. In addition, all values below HistogramRule.start are placed in one group, and all values above HistogramRule.end are placed in another. Only HistogramRule.interval is required, though if HistogramRule.start and HistogramRule.end are both provided, HistogramRule.start must be less than HistogramRule.end. For example, a pivot table showing average purchase amount by age that has 50+ rows:      +-----+-------------------+     | Age | AVERAGE of Amount |     +-----+-------------------+     | 16  |            $27.13 |     | 17  |             $5.24 |     | 18  |            $20.15 |     ...     +-----+-------------------+ could be turned into a pivot table that looks like the one below by applying a histogram group rule with a HistogramRule.start of 25, an HistogramRule.interval of 20, and an HistogramRule.end of 65.      +-------------+-------------------+     | Grouped Age | AVERAGE of Amount |     +-------------+-------------------+     | < 25        |            $19.34 |     | 25-45       |            $31.43 |     | 45-65       |            $35.87 |     | > 65        |            $27.55 |     +-------------+-------------------+     | Grand Total |            $29.12 |     +-------------+-------------------+
 * @export
 * @interface HistogramRule
 */
export interface HistogramRule {
    /**
     * The maximum value at which items are placed into buckets of constant size. Values above end are lumped into a single bucket. This field is optional.
     * @type {number}
     * @memberof HistogramRule
     */
    end?: number;
    /**
     * The size of the buckets that are created. Must be positive.
     * @type {number}
     * @memberof HistogramRule
     */
    interval?: number;
    /**
     * The minimum value at which items are placed into buckets of constant size. Values below start are lumped into a single bucket. This field is optional.
     * @type {number}
     * @memberof HistogramRule
     */
    start?: number;
}

/**
 * A histogram series containing the series color and data.
 * @export
 * @interface HistogramSeries
 */
export interface HistogramSeries {
    /**
     * The color of the column representing this series in each bucket. This field is optional.
     * @type {Color}
     * @memberof HistogramSeries
     */
    barColor?: Color;
    /**
     * The data for this histogram series.
     * @type {ChartData}
     * @memberof HistogramSeries
     */
    data?: ChartData;
}

/**
 * Inserts rows or columns in a sheet at a particular index.
 * @export
 * @interface InsertDimensionRequest
 */
export interface InsertDimensionRequest {
    /**
     * Whether dimension properties should be extended from the dimensions before or after the newly inserted dimensions. True to inherit from the dimensions before (in which case the start index must be greater than 0), and false to inherit from the dimensions after.  For example, if row index 0 has red background and row index 1 has a green background, then inserting 2 rows at index 1 can inherit either the green or red background.  If `inheritFromBefore` is true, the two new rows will be red (because the row before the insertion point was red), whereas if `inheritFromBefore` is false, the two new rows will be green (because the row after the insertion point was green).
     * @type {boolean}
     * @memberof InsertDimensionRequest
     */
    inheritFromBefore?: boolean;
    /**
     * The dimensions to insert.  Both the start and end indexes must be bounded.
     * @type {DimensionRange}
     * @memberof InsertDimensionRequest
     */
    range?: DimensionRange;
}

/**
 * Inserts cells into a range, shifting the existing cells over or down.
 * @export
 * @interface InsertRangeRequest
 */
export interface InsertRangeRequest {
    /**
     * The range to insert new cells into.
     * @type {GridRange}
     * @memberof InsertRangeRequest
     */
    range?: GridRange;
    /**
     * The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.
     * @type {string}
     * @memberof InsertRangeRequest
     */
    shiftDimension?: InsertRangeRequest.ShiftDimensionEnum;
}

/**
 * @export
 * @namespace InsertRangeRequest
 */
export namespace InsertRangeRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum ShiftDimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
 * @export
 * @interface InterpolationPoint
 */
export interface InterpolationPoint {
    /**
     * The color this interpolation point should use.
     * @type {Color}
     * @memberof InterpolationPoint
     */
    color?: Color;
    /**
     * How the value should be interpreted.
     * @type {string}
     * @memberof InterpolationPoint
     */
    type?: InterpolationPoint.TypeEnum;
    /**
     * The value this interpolation point uses.  May be a formula. Unused if type is MIN or MAX.
     * @type {string}
     * @memberof InterpolationPoint
     */
    value?: string;
}

/**
 * @export
 * @namespace InterpolationPoint
 */
export namespace InterpolationPoint {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        INTERPOLATIONPOINTTYPEUNSPECIFIED = <any> 'INTERPOLATION_POINT_TYPE_UNSPECIFIED',
        MIN = <any> 'MIN',
        MAX = <any> 'MAX',
        NUMBER = <any> 'NUMBER',
        PERCENT = <any> 'PERCENT',
        PERCENTILE = <any> 'PERCENTILE'
    }
}

/**
 * Settings to control how circular dependencies are resolved with iterative calculation.
 * @export
 * @interface IterativeCalculationSettings
 */
export interface IterativeCalculationSettings {
    /**
     * When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.
     * @type {number}
     * @memberof IterativeCalculationSettings
     */
    convergenceThreshold?: number;
    /**
     * When iterative calculation is enabled, the maximum number of calculation rounds to perform.
     * @type {number}
     * @memberof IterativeCalculationSettings
     */
    maxIterations?: number;
}

/**
 * Properties that describe the style of a line.
 * @export
 * @interface LineStyle
 */
export interface LineStyle {
    /**
     * The dash type of the line.
     * @type {string}
     * @memberof LineStyle
     */
    type?: LineStyle.TypeEnum;
    /**
     * The thickness of the line, in px.
     * @type {number}
     * @memberof LineStyle
     */
    width?: number;
}

/**
 * @export
 * @namespace LineStyle
 */
export namespace LineStyle {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        LINEDASHTYPEUNSPECIFIED = <any> 'LINE_DASH_TYPE_UNSPECIFIED',
        INVISIBLE = <any> 'INVISIBLE',
        CUSTOM = <any> 'CUSTOM',
        SOLID = <any> 'SOLID',
        DOTTED = <any> 'DOTTED',
        MEDIUMDASHED = <any> 'MEDIUM_DASHED',
        MEDIUMDASHEDDOTTED = <any> 'MEDIUM_DASHED_DOTTED',
        LONGDASHED = <any> 'LONG_DASHED',
        LONGDASHEDDOTTED = <any> 'LONG_DASHED_DOTTED'
    }
}

/**
 * Allows you to manually organize the values in a source data column into buckets with names of your choosing. For example, a pivot table that aggregates population by state:      +-------+-------------------+     | State | SUM of Population |     +-------+-------------------+     | AK    |               0.7 |     | AL    |               4.8 |     | AR    |               2.9 |     ...     +-------+-------------------+ could be turned into a pivot table that aggregates population by time zone by providing a list of groups (for example, groupName = 'Central', items = ['AL', 'AR', 'IA', ...]) to a manual group rule. Note that a similar effect could be achieved by adding a time zone column to the source data and adjusting the pivot table.      +-----------+-------------------+     | Time Zone | SUM of Population |     +-----------+-------------------+     | Central   |             106.3 |     | Eastern   |             151.9 |     | Mountain  |              17.4 |     ...     +-----------+-------------------+
 * @export
 * @interface ManualRule
 */
export interface ManualRule {
    /**
     * The list of group names and the corresponding items from the source data that map to each group name.
     * @type {Array&lt;ManualRuleGroup&gt;}
     * @memberof ManualRule
     */
    groups?: Array<ManualRuleGroup>;
}

/**
 * A group name and a list of items from the source data that should be placed in the group with this name.
 * @export
 * @interface ManualRuleGroup
 */
export interface ManualRuleGroup {
    /**
     * The group name, which must be a string. Each group in a given ManualRule must have a unique group name.
     * @type {ExtendedValue}
     * @memberof ManualRuleGroup
     */
    groupName?: ExtendedValue;
    /**
     * The items in the source data that should be placed into this group. Each item may be a string, number, or boolean. Items may appear in at most one group within a given ManualRule. Items that do not appear in any group will appear on their own.
     * @type {Array&lt;ExtendedValue&gt;}
     * @memberof ManualRuleGroup
     */
    items?: Array<ExtendedValue>;
}

/**
 * A developer metadata entry and the data filters specified in the original request that matched it.
 * @export
 * @interface MatchedDeveloperMetadata
 */
export interface MatchedDeveloperMetadata {
    /**
     * All filters matching the returned developer metadata.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof MatchedDeveloperMetadata
     */
    dataFilters?: Array<DataFilter>;
    /**
     * The developer metadata matching the specified filters.
     * @type {DeveloperMetadata}
     * @memberof MatchedDeveloperMetadata
     */
    developerMetadata?: DeveloperMetadata;
}

/**
 * A value range that was matched by one or more data filers.
 * @export
 * @interface MatchedValueRange
 */
export interface MatchedValueRange {
    /**
     * The DataFilters from the request that matched the range of values.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof MatchedValueRange
     */
    dataFilters?: Array<DataFilter>;
    /**
     * The values matched by the DataFilter.
     * @type {ValueRange}
     * @memberof MatchedValueRange
     */
    valueRange?: ValueRange;
}

/**
 * Merges all cells in the range.
 * @export
 * @interface MergeCellsRequest
 */
export interface MergeCellsRequest {
    /**
     * How the cells should be merged.
     * @type {string}
     * @memberof MergeCellsRequest
     */
    mergeType?: MergeCellsRequest.MergeTypeEnum;
    /**
     * The range of cells to merge.
     * @type {GridRange}
     * @memberof MergeCellsRequest
     */
    range?: GridRange;
}

/**
 * @export
 * @namespace MergeCellsRequest
 */
export namespace MergeCellsRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum MergeTypeEnum {
        ALL = <any> 'MERGE_ALL',
        COLUMNS = <any> 'MERGE_COLUMNS',
        ROWS = <any> 'MERGE_ROWS'
    }
}

/**
 * Moves one or more rows or columns.
 * @export
 * @interface MoveDimensionRequest
 */
export interface MoveDimensionRequest {
    /**
     * The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid.  Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified.  For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be `ROWS [1..3)`,and the destination index would be `\"4\"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
     * @type {number}
     * @memberof MoveDimensionRequest
     */
    destinationIndex?: number;
    /**
     * The source dimensions to move.
     * @type {DimensionRange}
     * @memberof MoveDimensionRequest
     */
    source?: DimensionRange;
}

/**
 * A named range.
 * @export
 * @interface NamedRange
 */
export interface NamedRange {
    /**
     * The name of the named range.
     * @type {string}
     * @memberof NamedRange
     */
    name?: string;
    /**
     * The ID of the named range.
     * @type {string}
     * @memberof NamedRange
     */
    namedRangeId?: string;
    /**
     * The range this represents.
     * @type {GridRange}
     * @memberof NamedRange
     */
    range?: GridRange;
}

/**
 * The number format of a cell.
 * @export
 * @interface NumberFormat
 */
export interface NumberFormat {
    /**
     * Pattern string used for formatting.  If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.
     * @type {string}
     * @memberof NumberFormat
     */
    pattern?: string;
    /**
     * The type of the number format. When writing, this field must be set.
     * @type {string}
     * @memberof NumberFormat
     */
    type?: NumberFormat.TypeEnum;
}

/**
 * @export
 * @namespace NumberFormat
 */
export namespace NumberFormat {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        NUMBERFORMATTYPEUNSPECIFIED = <any> 'NUMBER_FORMAT_TYPE_UNSPECIFIED',
        TEXT = <any> 'TEXT',
        NUMBER = <any> 'NUMBER',
        PERCENT = <any> 'PERCENT',
        CURRENCY = <any> 'CURRENCY',
        DATE = <any> 'DATE',
        TIME = <any> 'TIME',
        DATETIME = <any> 'DATE_TIME',
        SCIENTIFIC = <any> 'SCIENTIFIC'
    }
}

/**
 * An <a href=\"/chart/interactive/docs/gallery/orgchart\">org chart</a>. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node.  tooltips contain, for each node, an optional tooltip.  For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain \"Alice\", \"Bob\", \"Cathy\", parent_labels contain \"\", \"Alice\", \"Alice\" and tooltips contain \"CEO\", \"President\", \"VP Sales\".
 * @export
 * @interface OrgChartSpec
 */
export interface OrgChartSpec {
    /**
     * The data containing the labels for all the nodes in the chart.  Labels must be unique.
     * @type {ChartData}
     * @memberof OrgChartSpec
     */
    labels?: ChartData;
    /**
     * The color of the org chart nodes.
     * @type {Color}
     * @memberof OrgChartSpec
     */
    nodeColor?: Color;
    /**
     * The size of the org chart nodes.
     * @type {string}
     * @memberof OrgChartSpec
     */
    nodeSize?: OrgChartSpec.NodeSizeEnum;
    /**
     * The data containing the label of the parent for the corresponding node. A blank value indicates that the node has no parent and is a top-level node. This field is optional.
     * @type {ChartData}
     * @memberof OrgChartSpec
     */
    parentLabels?: ChartData;
    /**
     * The color of the selected org chart nodes.
     * @type {Color}
     * @memberof OrgChartSpec
     */
    selectedNodeColor?: Color;
    /**
     * The data containing the tooltip for the corresponding node.  A blank value results in no tooltip being displayed for the node. This field is optional.
     * @type {ChartData}
     * @memberof OrgChartSpec
     */
    tooltips?: ChartData;
}

/**
 * @export
 * @namespace OrgChartSpec
 */
export namespace OrgChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum NodeSizeEnum {
        ORGCHARTLABELSIZEUNSPECIFIED = <any> 'ORG_CHART_LABEL_SIZE_UNSPECIFIED',
        SMALL = <any> 'SMALL',
        MEDIUM = <any> 'MEDIUM',
        LARGE = <any> 'LARGE'
    }
}

/**
 * The location an object is overlaid on top of a grid.
 * @export
 * @interface OverlayPosition
 */
export interface OverlayPosition {
    /**
     * The cell the object is anchored to.
     * @type {GridCoordinate}
     * @memberof OverlayPosition
     */
    anchorCell?: GridCoordinate;
    /**
     * The height of the object, in pixels. Defaults to 371.
     * @type {number}
     * @memberof OverlayPosition
     */
    heightPixels?: number;
    /**
     * The horizontal offset, in pixels, that the object is offset from the anchor cell.
     * @type {number}
     * @memberof OverlayPosition
     */
    offsetXPixels?: number;
    /**
     * The vertical offset, in pixels, that the object is offset from the anchor cell.
     * @type {number}
     * @memberof OverlayPosition
     */
    offsetYPixels?: number;
    /**
     * The width of the object, in pixels. Defaults to 600.
     * @type {number}
     * @memberof OverlayPosition
     */
    widthPixels?: number;
}

/**
 * The amount of padding around the cell, in pixels. When updating padding, every field must be specified.
 * @export
 * @interface Padding
 */
export interface Padding {
    /**
     * The bottom padding of the cell.
     * @type {number}
     * @memberof Padding
     */
    bottom?: number;
    /**
     * The left padding of the cell.
     * @type {number}
     * @memberof Padding
     */
    left?: number;
    /**
     * The right padding of the cell.
     * @type {number}
     * @memberof Padding
     */
    right?: number;
    /**
     * The top padding of the cell.
     * @type {number}
     * @memberof Padding
     */
    top?: number;
}

/**
 * Inserts data into the spreadsheet starting at the specified coordinate.
 * @export
 * @interface PasteDataRequest
 */
export interface PasteDataRequest {
    /**
     * The coordinate at which the data should start being inserted.
     * @type {GridCoordinate}
     * @memberof PasteDataRequest
     */
    coordinate?: GridCoordinate;
    /**
     * The data to insert.
     * @type {string}
     * @memberof PasteDataRequest
     */
    data?: string;
    /**
     * The delimiter in the data.
     * @type {string}
     * @memberof PasteDataRequest
     */
    delimiter?: string;
    /**
     * True if the data is HTML.
     * @type {boolean}
     * @memberof PasteDataRequest
     */
    html?: boolean;
    /**
     * How the data should be pasted.
     * @type {string}
     * @memberof PasteDataRequest
     */
    type?: PasteDataRequest.TypeEnum;
}

/**
 * @export
 * @namespace PasteDataRequest
 */
export namespace PasteDataRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        NORMAL = <any> 'PASTE_NORMAL',
        VALUES = <any> 'PASTE_VALUES',
        FORMAT = <any> 'PASTE_FORMAT',
        NOBORDERS = <any> 'PASTE_NO_BORDERS',
        FORMULA = <any> 'PASTE_FORMULA',
        DATAVALIDATION = <any> 'PASTE_DATA_VALIDATION',
        CONDITIONALFORMATTING = <any> 'PASTE_CONDITIONAL_FORMATTING'
    }
}

/**
 * A <a href=\"/chart/interactive/docs/gallery/piechart\">pie chart</a>.
 * @export
 * @interface PieChartSpec
 */
export interface PieChartSpec {
    /**
     * The data that covers the domain of the pie chart.
     * @type {ChartData}
     * @memberof PieChartSpec
     */
    domain?: ChartData;
    /**
     * Where the legend of the pie chart should be drawn.
     * @type {string}
     * @memberof PieChartSpec
     */
    legendPosition?: PieChartSpec.LegendPositionEnum;
    /**
     * The size of the hole in the pie chart.
     * @type {number}
     * @memberof PieChartSpec
     */
    pieHole?: number;
    /**
     * The data that covers the one and only series of the pie chart.
     * @type {ChartData}
     * @memberof PieChartSpec
     */
    series?: ChartData;
    /**
     * True if the pie is three dimensional.
     * @type {boolean}
     * @memberof PieChartSpec
     */
    threeDimensional?: boolean;
}

/**
 * @export
 * @namespace PieChartSpec
 */
export namespace PieChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum LegendPositionEnum {
        PIECHARTLEGENDPOSITIONUNSPECIFIED = <any> 'PIE_CHART_LEGEND_POSITION_UNSPECIFIED',
        BOTTOMLEGEND = <any> 'BOTTOM_LEGEND',
        LEFTLEGEND = <any> 'LEFT_LEGEND',
        RIGHTLEGEND = <any> 'RIGHT_LEGEND',
        TOPLEGEND = <any> 'TOP_LEGEND',
        NOLEGEND = <any> 'NO_LEGEND',
        LABELEDLEGEND = <any> 'LABELED_LEGEND'
    }
}

/**
 * Criteria for showing/hiding rows in a pivot table.
 * @export
 * @interface PivotFilterCriteria
 */
export interface PivotFilterCriteria {
    /**
     * Values that should be included.  Values not listed here are excluded.
     * @type {Array&lt;string&gt;}
     * @memberof PivotFilterCriteria
     */
    visibleValues?: Array<string>;
}

/**
 * A single grouping (either row or column) in a pivot table.
 * @export
 * @interface PivotGroup
 */
export interface PivotGroup {
    /**
     * The group rule to apply to this row/column group.
     * @type {PivotGroupRule}
     * @memberof PivotGroup
     */
    groupRule?: PivotGroupRule;
    /**
     * The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters.      +--------------+---------+-------+     | SUM of Units | Product |       |     | Region       | Pen     | Paper |     +--------------+---------+-------+     | New York     |     345 |    98 |     | Oregon       |     234 |   123 |     | Tennessee    |     531 |   415 |     +--------------+---------+-------+     | Grand Total  |    1110 |   636 |     +--------------+---------+-------+
     * @type {string}
     * @memberof PivotGroup
     */
    label?: string;
    /**
     * True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns.  By default, we minimize repitition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".      +--------------+     | Q1     | Jan |     |        | Feb |     |        | Mar |     +--------+-----+     | Q1 Total     |     +--------------+
     * @type {boolean}
     * @memberof PivotGroup
     */
    repeatHeadings?: boolean;
    /**
     * True if the pivot table should include the totals for this grouping.
     * @type {boolean}
     * @memberof PivotGroup
     */
    showTotals?: boolean;
    /**
     * The order the values in this group should be sorted.
     * @type {string}
     * @memberof PivotGroup
     */
    sortOrder?: PivotGroup.SortOrderEnum;
    /**
     * The column offset of the source range that this grouping is based on.  For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.
     * @type {number}
     * @memberof PivotGroup
     */
    sourceColumnOffset?: number;
    /**
     * The bucket of the opposite pivot group to sort by. If not specified, sorting is alphabetical by this group's values.
     * @type {PivotGroupSortValueBucket}
     * @memberof PivotGroup
     */
    valueBucket?: PivotGroupSortValueBucket;
    /**
     * Metadata about values in the grouping.
     * @type {Array&lt;PivotGroupValueMetadata&gt;}
     * @memberof PivotGroup
     */
    valueMetadata?: Array<PivotGroupValueMetadata>;
}

/**
 * @export
 * @namespace PivotGroup
 */
export namespace PivotGroup {
    /**
     * @export
     * @enum {string}
     */
    export enum SortOrderEnum {
        SORTORDERUNSPECIFIED = <any> 'SORT_ORDER_UNSPECIFIED',
        ASCENDING = <any> 'ASCENDING',
        DESCENDING = <any> 'DESCENDING'
    }
}

/**
 * An optional setting on a PivotGroup that defines buckets for the values in the source data column rather than breaking out each individual value. Only one PivotGroup with a group rule may be added for each column in the source data, though on any given column you may add both a PivotGroup that has a rule and a PivotGroup that does not.
 * @export
 * @interface PivotGroupRule
 */
export interface PivotGroupRule {
    /**
     * A DateTimeRule.
     * @type {DateTimeRule}
     * @memberof PivotGroupRule
     */
    dateTimeRule?: DateTimeRule;
    /**
     * A HistogramRule.
     * @type {HistogramRule}
     * @memberof PivotGroupRule
     */
    histogramRule?: HistogramRule;
    /**
     * A ManualRule.
     * @type {ManualRule}
     * @memberof PivotGroupRule
     */
    manualRule?: ManualRule;
}

/**
 * Information about which values in a pivot group should be used for sorting.
 * @export
 * @interface PivotGroupSortValueBucket
 */
export interface PivotGroupSortValueBucket {
    /**
     * Determines the bucket from which values are chosen to sort.  For example, in a pivot table with one row group & two column groups, the row group can list up to two values. The first value corresponds to a value within the first column group, and the second value corresponds to a value in the second column group.  If no values are listed, this would indicate that the row should be sorted according to the \"Grand Total\" over the column groups. If a single value is listed, this would correspond to using the \"Total\" of that bucket.
     * @type {Array&lt;ExtendedValue&gt;}
     * @memberof PivotGroupSortValueBucket
     */
    buckets?: Array<ExtendedValue>;
    /**
     * The offset in the PivotTable.values list which the values in this grouping should be sorted by.
     * @type {number}
     * @memberof PivotGroupSortValueBucket
     */
    valuesIndex?: number;
}

/**
 * Metadata about a value in a pivot grouping.
 * @export
 * @interface PivotGroupValueMetadata
 */
export interface PivotGroupValueMetadata {
    /**
     * True if the data corresponding to the value is collapsed.
     * @type {boolean}
     * @memberof PivotGroupValueMetadata
     */
    collapsed?: boolean;
    /**
     * The calculated value the metadata corresponds to. (Note that formulaValue is not valid,  because the values will be calculated.)
     * @type {ExtendedValue}
     * @memberof PivotGroupValueMetadata
     */
    value?: ExtendedValue;
}

/**
 * A pivot table.
 * @export
 * @interface PivotTable
 */
export interface PivotTable {
    /**
     * Each column grouping in the pivot table.
     * @type {Array&lt;PivotGroup&gt;}
     * @memberof PivotTable
     */
    columns?: Array<PivotGroup>;
    /**
     * An optional mapping of filters per source column offset.  The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column.  For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`.
     * @type {{ [key: string]: PivotFilterCriteria; }}
     * @memberof PivotTable
     */
    criteria?: { [key: string]: PivotFilterCriteria; };
    /**
     * Each row grouping in the pivot table.
     * @type {Array&lt;PivotGroup&gt;}
     * @memberof PivotTable
     */
    rows?: Array<PivotGroup>;
    /**
     * The range the pivot table is reading data from.
     * @type {GridRange}
     * @memberof PivotTable
     */
    source?: GridRange;
    /**
     * Whether values should be listed horizontally (as columns) or vertically (as rows).
     * @type {string}
     * @memberof PivotTable
     */
    valueLayout?: PivotTable.ValueLayoutEnum;
    /**
     * A list of values to include in the pivot table.
     * @type {Array&lt;PivotValue&gt;}
     * @memberof PivotTable
     */
    values?: Array<PivotValue>;
}

/**
 * @export
 * @namespace PivotTable
 */
export namespace PivotTable {
    /**
     * @export
     * @enum {string}
     */
    export enum ValueLayoutEnum {
        HORIZONTAL = <any> 'HORIZONTAL',
        VERTICAL = <any> 'VERTICAL'
    }
}

/**
 * The definition of how a value in a pivot table should be calculated.
 * @export
 * @interface PivotValue
 */
export interface PivotValue {
    /**
     * If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets UI, this is referred to as \"Show As\" in the value section of a pivot table.
     * @type {string}
     * @memberof PivotValue
     */
    calculatedDisplayType?: PivotValue.CalculatedDisplayTypeEnum;
    /**
     * A custom formula to calculate the value.  The formula must start with an `=` character.
     * @type {string}
     * @memberof PivotValue
     */
    formula?: string;
    /**
     * A name to use for the value.
     * @type {string}
     * @memberof PivotValue
     */
    name?: string;
    /**
     * The column offset of the source range that this value reads from.  For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
     * @type {number}
     * @memberof PivotValue
     */
    sourceColumnOffset?: number;
    /**
     * A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
     * @type {string}
     * @memberof PivotValue
     */
    summarizeFunction?: PivotValue.SummarizeFunctionEnum;
}

/**
 * @export
 * @namespace PivotValue
 */
export namespace PivotValue {
    /**
     * @export
     * @enum {string}
     */
    export enum CalculatedDisplayTypeEnum {
        PIVOTVALUECALCULATEDDISPLAYTYPEUNSPECIFIED = <any> 'PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED',
        PERCENTOFROWTOTAL = <any> 'PERCENT_OF_ROW_TOTAL',
        PERCENTOFCOLUMNTOTAL = <any> 'PERCENT_OF_COLUMN_TOTAL',
        PERCENTOFGRANDTOTAL = <any> 'PERCENT_OF_GRAND_TOTAL'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SummarizeFunctionEnum {
        PIVOTSTANDARDVALUEFUNCTIONUNSPECIFIED = <any> 'PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED',
        SUM = <any> 'SUM',
        COUNTA = <any> 'COUNTA',
        COUNT = <any> 'COUNT',
        COUNTUNIQUE = <any> 'COUNTUNIQUE',
        AVERAGE = <any> 'AVERAGE',
        MAX = <any> 'MAX',
        MIN = <any> 'MIN',
        MEDIAN = <any> 'MEDIAN',
        PRODUCT = <any> 'PRODUCT',
        STDEV = <any> 'STDEV',
        STDEVP = <any> 'STDEVP',
        VAR = <any> 'VAR',
        VARP = <any> 'VARP',
        CUSTOM = <any> 'CUSTOM'
    }
}

/**
 * A protected range.
 * @export
 * @interface ProtectedRange
 */
export interface ProtectedRange {
    /**
     * The description of this protected range.
     * @type {string}
     * @memberof ProtectedRange
     */
    description?: string;
    /**
     * The users and groups with edit access to the protected range. This field is only visible to users with edit access to the protected range and the document. Editors are not supported with warning_only protection.
     * @type {Editors}
     * @memberof ProtectedRange
     */
    editors?: Editors;
    /**
     * The named range this protected range is backed by, if any.  When writing, only one of range or named_range_id may be set.
     * @type {string}
     * @memberof ProtectedRange
     */
    namedRangeId?: string;
    /**
     * The ID of the protected range. This field is read-only.
     * @type {number}
     * @memberof ProtectedRange
     */
    protectedRangeId?: number;
    /**
     * The range that is being protected. The range may be fully unbounded, in which case this is considered a protected sheet.  When writing, only one of range or named_range_id may be set.
     * @type {GridRange}
     * @memberof ProtectedRange
     */
    range?: GridRange;
    /**
     * True if the user who requested this protected range can edit the protected area. This field is read-only.
     * @type {boolean}
     * @memberof ProtectedRange
     */
    requestingUserCanEdit?: boolean;
    /**
     * The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
     * @type {Array&lt;GridRange&gt;}
     * @memberof ProtectedRange
     */
    unprotectedRanges?: Array<GridRange>;
    /**
     * True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit.  When writing: if this field is true, then editors is ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
     * @type {boolean}
     * @memberof ProtectedRange
     */
    warningOnly?: boolean;
}

/**
 * Randomizes the order of the rows in a range.
 * @export
 * @interface RandomizeRangeRequest
 */
export interface RandomizeRangeRequest {
    /**
     * The range to randomize.
     * @type {GridRange}
     * @memberof RandomizeRangeRequest
     */
    range?: GridRange;
}

/**
 * Updates all cells in the range to the values in the given Cell object. Only the fields listed in the fields field are updated; others are unchanged.  If writing a cell with a formula, the formula's ranges will automatically increment for each field in the range. For example, if writing a cell with formula `=A1` into range B2:C4, B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`, C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.  To keep the formula's ranges static, use the `$` indicator. For example, use the formula `=$A$1` to prevent both the row and the column from incrementing.
 * @export
 * @interface RepeatCellRequest
 */
export interface RepeatCellRequest {
    /**
     * The data to write.
     * @type {CellData}
     * @memberof RepeatCellRequest
     */
    cell?: CellData;
    /**
     * The fields that should be updated.  At least one field must be specified. The root `cell` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof RepeatCellRequest
     */
    fields?: string;
    /**
     * The range to repeat the cell in.
     * @type {GridRange}
     * @memberof RepeatCellRequest
     */
    range?: GridRange;
}

/**
 * A single kind of update to apply to a spreadsheet.
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * Adds a new banded range
     * @type {AddBandingRequest}
     * @memberof Request
     */
    addBanding?: AddBandingRequest;
    /**
     * Adds a chart.
     * @type {AddChartRequest}
     * @memberof Request
     */
    addChart?: AddChartRequest;
    /**
     * Adds a new conditional format rule.
     * @type {AddConditionalFormatRuleRequest}
     * @memberof Request
     */
    addConditionalFormatRule?: AddConditionalFormatRuleRequest;
    /**
     * Creates a group over the specified range.
     * @type {AddDimensionGroupRequest}
     * @memberof Request
     */
    addDimensionGroup?: AddDimensionGroupRequest;
    /**
     * Adds a filter view.
     * @type {AddFilterViewRequest}
     * @memberof Request
     */
    addFilterView?: AddFilterViewRequest;
    /**
     * Adds a named range.
     * @type {AddNamedRangeRequest}
     * @memberof Request
     */
    addNamedRange?: AddNamedRangeRequest;
    /**
     * Adds a protected range.
     * @type {AddProtectedRangeRequest}
     * @memberof Request
     */
    addProtectedRange?: AddProtectedRangeRequest;
    /**
     * Adds a sheet.
     * @type {AddSheetRequest}
     * @memberof Request
     */
    addSheet?: AddSheetRequest;
    /**
     * Appends cells after the last row with data in a sheet.
     * @type {AppendCellsRequest}
     * @memberof Request
     */
    appendCells?: AppendCellsRequest;
    /**
     * Appends dimensions to the end of a sheet.
     * @type {AppendDimensionRequest}
     * @memberof Request
     */
    appendDimension?: AppendDimensionRequest;
    /**
     * Automatically fills in more data based on existing data.
     * @type {AutoFillRequest}
     * @memberof Request
     */
    autoFill?: AutoFillRequest;
    /**
     * Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
     * @type {AutoResizeDimensionsRequest}
     * @memberof Request
     */
    autoResizeDimensions?: AutoResizeDimensionsRequest;
    /**
     * Clears the basic filter on a sheet.
     * @type {ClearBasicFilterRequest}
     * @memberof Request
     */
    clearBasicFilter?: ClearBasicFilterRequest;
    /**
     * Copies data from one area and pastes it to another.
     * @type {CopyPasteRequest}
     * @memberof Request
     */
    copyPaste?: CopyPasteRequest;
    /**
     * Creates new developer metadata
     * @type {CreateDeveloperMetadataRequest}
     * @memberof Request
     */
    createDeveloperMetadata?: CreateDeveloperMetadataRequest;
    /**
     * Cuts data from one area and pastes it to another.
     * @type {CutPasteRequest}
     * @memberof Request
     */
    cutPaste?: CutPasteRequest;
    /**
     * Removes a banded range
     * @type {DeleteBandingRequest}
     * @memberof Request
     */
    deleteBanding?: DeleteBandingRequest;
    /**
     * Deletes an existing conditional format rule.
     * @type {DeleteConditionalFormatRuleRequest}
     * @memberof Request
     */
    deleteConditionalFormatRule?: DeleteConditionalFormatRuleRequest;
    /**
     * Deletes developer metadata
     * @type {DeleteDeveloperMetadataRequest}
     * @memberof Request
     */
    deleteDeveloperMetadata?: DeleteDeveloperMetadataRequest;
    /**
     * Deletes rows or columns in a sheet.
     * @type {DeleteDimensionRequest}
     * @memberof Request
     */
    deleteDimension?: DeleteDimensionRequest;
    /**
     * Deletes a group over the specified range.
     * @type {DeleteDimensionGroupRequest}
     * @memberof Request
     */
    deleteDimensionGroup?: DeleteDimensionGroupRequest;
    /**
     * Deletes an embedded object (e.g, chart, image) in a sheet.
     * @type {DeleteEmbeddedObjectRequest}
     * @memberof Request
     */
    deleteEmbeddedObject?: DeleteEmbeddedObjectRequest;
    /**
     * Deletes a filter view from a sheet.
     * @type {DeleteFilterViewRequest}
     * @memberof Request
     */
    deleteFilterView?: DeleteFilterViewRequest;
    /**
     * Deletes a named range.
     * @type {DeleteNamedRangeRequest}
     * @memberof Request
     */
    deleteNamedRange?: DeleteNamedRangeRequest;
    /**
     * Deletes a protected range.
     * @type {DeleteProtectedRangeRequest}
     * @memberof Request
     */
    deleteProtectedRange?: DeleteProtectedRangeRequest;
    /**
     * Deletes a range of cells from a sheet, shifting the remaining cells.
     * @type {DeleteRangeRequest}
     * @memberof Request
     */
    deleteRange?: DeleteRangeRequest;
    /**
     * Deletes a sheet.
     * @type {DeleteSheetRequest}
     * @memberof Request
     */
    deleteSheet?: DeleteSheetRequest;
    /**
     * Duplicates a filter view.
     * @type {DuplicateFilterViewRequest}
     * @memberof Request
     */
    duplicateFilterView?: DuplicateFilterViewRequest;
    /**
     * Duplicates a sheet.
     * @type {DuplicateSheetRequest}
     * @memberof Request
     */
    duplicateSheet?: DuplicateSheetRequest;
    /**
     * Finds and replaces occurrences of some text with other text.
     * @type {FindReplaceRequest}
     * @memberof Request
     */
    findReplace?: FindReplaceRequest;
    /**
     * Inserts new rows or columns in a sheet.
     * @type {InsertDimensionRequest}
     * @memberof Request
     */
    insertDimension?: InsertDimensionRequest;
    /**
     * Inserts new cells in a sheet, shifting the existing cells.
     * @type {InsertRangeRequest}
     * @memberof Request
     */
    insertRange?: InsertRangeRequest;
    /**
     * Merges cells together.
     * @type {MergeCellsRequest}
     * @memberof Request
     */
    mergeCells?: MergeCellsRequest;
    /**
     * Moves rows or columns to another location in a sheet.
     * @type {MoveDimensionRequest}
     * @memberof Request
     */
    moveDimension?: MoveDimensionRequest;
    /**
     * Pastes data (HTML or delimited) into a sheet.
     * @type {PasteDataRequest}
     * @memberof Request
     */
    pasteData?: PasteDataRequest;
    /**
     * Randomizes the order of the rows in a range.
     * @type {RandomizeRangeRequest}
     * @memberof Request
     */
    randomizeRange?: RandomizeRangeRequest;
    /**
     * Repeats a single cell across a range.
     * @type {RepeatCellRequest}
     * @memberof Request
     */
    repeatCell?: RepeatCellRequest;
    /**
     * Sets the basic filter on a sheet.
     * @type {SetBasicFilterRequest}
     * @memberof Request
     */
    setBasicFilter?: SetBasicFilterRequest;
    /**
     * Sets data validation for one or more cells.
     * @type {SetDataValidationRequest}
     * @memberof Request
     */
    setDataValidation?: SetDataValidationRequest;
    /**
     * Sorts data in a range.
     * @type {SortRangeRequest}
     * @memberof Request
     */
    sortRange?: SortRangeRequest;
    /**
     * Converts a column of text into many columns of text.
     * @type {TextToColumnsRequest}
     * @memberof Request
     */
    textToColumns?: TextToColumnsRequest;
    /**
     * Unmerges merged cells.
     * @type {UnmergeCellsRequest}
     * @memberof Request
     */
    unmergeCells?: UnmergeCellsRequest;
    /**
     * Updates a banded range
     * @type {UpdateBandingRequest}
     * @memberof Request
     */
    updateBanding?: UpdateBandingRequest;
    /**
     * Updates the borders in a range of cells.
     * @type {UpdateBordersRequest}
     * @memberof Request
     */
    updateBorders?: UpdateBordersRequest;
    /**
     * Updates many cells at once.
     * @type {UpdateCellsRequest}
     * @memberof Request
     */
    updateCells?: UpdateCellsRequest;
    /**
     * Updates a chart's specifications.
     * @type {UpdateChartSpecRequest}
     * @memberof Request
     */
    updateChartSpec?: UpdateChartSpecRequest;
    /**
     * Updates an existing conditional format rule.
     * @type {UpdateConditionalFormatRuleRequest}
     * @memberof Request
     */
    updateConditionalFormatRule?: UpdateConditionalFormatRuleRequest;
    /**
     * Updates an existing developer metadata entry
     * @type {UpdateDeveloperMetadataRequest}
     * @memberof Request
     */
    updateDeveloperMetadata?: UpdateDeveloperMetadataRequest;
    /**
     * Updates the state of the specified group.
     * @type {UpdateDimensionGroupRequest}
     * @memberof Request
     */
    updateDimensionGroup?: UpdateDimensionGroupRequest;
    /**
     * Updates dimensions' properties.
     * @type {UpdateDimensionPropertiesRequest}
     * @memberof Request
     */
    updateDimensionProperties?: UpdateDimensionPropertiesRequest;
    /**
     * Updates an embedded object's (e.g. chart, image) position.
     * @type {UpdateEmbeddedObjectPositionRequest}
     * @memberof Request
     */
    updateEmbeddedObjectPosition?: UpdateEmbeddedObjectPositionRequest;
    /**
     * Updates the properties of a filter view.
     * @type {UpdateFilterViewRequest}
     * @memberof Request
     */
    updateFilterView?: UpdateFilterViewRequest;
    /**
     * Updates a named range.
     * @type {UpdateNamedRangeRequest}
     * @memberof Request
     */
    updateNamedRange?: UpdateNamedRangeRequest;
    /**
     * Updates a protected range.
     * @type {UpdateProtectedRangeRequest}
     * @memberof Request
     */
    updateProtectedRange?: UpdateProtectedRangeRequest;
    /**
     * Updates a sheet's properties.
     * @type {UpdateSheetPropertiesRequest}
     * @memberof Request
     */
    updateSheetProperties?: UpdateSheetPropertiesRequest;
    /**
     * Updates the spreadsheet's properties.
     * @type {UpdateSpreadsheetPropertiesRequest}
     * @memberof Request
     */
    updateSpreadsheetProperties?: UpdateSpreadsheetPropertiesRequest;
}

/**
 * A single response from an update.
 * @export
 * @interface Response
 */
export interface GSheetsResponse extends Response {
    /**
     * A reply from adding a banded range.
     * @type {AddBandingResponse}
     * @memberof Response
     */
    addBanding?: AddBandingResponse;
    /**
     * A reply from adding a chart.
     * @type {AddChartResponse}
     * @memberof Response
     */
    addChart?: AddChartResponse;
    /**
     * A reply from adding a dimension group.
     * @type {AddDimensionGroupResponse}
     * @memberof Response
     */
    addDimensionGroup?: AddDimensionGroupResponse;
    /**
     * A reply from adding a filter view.
     * @type {AddFilterViewResponse}
     * @memberof Response
     */
    addFilterView?: AddFilterViewResponse;
    /**
     * A reply from adding a named range.
     * @type {AddNamedRangeResponse}
     * @memberof Response
     */
    addNamedRange?: AddNamedRangeResponse;
    /**
     * A reply from adding a protected range.
     * @type {AddProtectedRangeResponse}
     * @memberof Response
     */
    addProtectedRange?: AddProtectedRangeResponse;
    /**
     * A reply from adding a sheet.
     * @type {AddSheetResponse}
     * @memberof Response
     */
    addSheet?: AddSheetResponse;
    /**
     * A reply from creating a developer metadata entry.
     * @type {CreateDeveloperMetadataResponse}
     * @memberof Response
     */
    createDeveloperMetadata?: CreateDeveloperMetadataResponse;
    /**
     * A reply from deleting a conditional format rule.
     * @type {DeleteConditionalFormatRuleResponse}
     * @memberof Response
     */
    deleteConditionalFormatRule?: DeleteConditionalFormatRuleResponse;
    /**
     * A reply from deleting a developer metadata entry.
     * @type {DeleteDeveloperMetadataResponse}
     * @memberof Response
     */
    deleteDeveloperMetadata?: DeleteDeveloperMetadataResponse;
    /**
     * A reply from deleting a dimension group.
     * @type {DeleteDimensionGroupResponse}
     * @memberof Response
     */
    deleteDimensionGroup?: DeleteDimensionGroupResponse;
    /**
     * A reply from duplicating a filter view.
     * @type {DuplicateFilterViewResponse}
     * @memberof Response
     */
    duplicateFilterView?: DuplicateFilterViewResponse;
    /**
     * A reply from duplicating a sheet.
     * @type {DuplicateSheetResponse}
     * @memberof Response
     */
    duplicateSheet?: DuplicateSheetResponse;
    /**
     * A reply from doing a find/replace.
     * @type {FindReplaceResponse}
     * @memberof Response
     */
    findReplace?: FindReplaceResponse;
    /**
     * A reply from updating a conditional format rule.
     * @type {UpdateConditionalFormatRuleResponse}
     * @memberof Response
     */
    updateConditionalFormatRule?: UpdateConditionalFormatRuleResponse;
    /**
     * A reply from updating a developer metadata entry.
     * @type {UpdateDeveloperMetadataResponse}
     * @memberof Response
     */
    updateDeveloperMetadata?: UpdateDeveloperMetadataResponse;
    /**
     * A reply from updating an embedded object's position.
     * @type {UpdateEmbeddedObjectPositionResponse}
     * @memberof Response
     */
    updateEmbeddedObjectPosition?: UpdateEmbeddedObjectPositionResponse;
}

/**
 * Data about each cell in a row.
 * @export
 * @interface RowData
 */
export interface RowData {
    /**
     * The values in the row, one per column.
     * @type {Array&lt;CellData&gt;}
     * @memberof RowData
     */
    values?: Array<CellData>;
}

/**
 * A request to retrieve all developer metadata matching the set of specified criteria.
 * @export
 * @interface SearchDeveloperMetadataRequest
 */
export interface SearchDeveloperMetadataRequest {
    /**
     * The data filters describing the criteria used to determine which DeveloperMetadata entries to return.  DeveloperMetadata matching any of the specified filters will be included in the response.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof SearchDeveloperMetadataRequest
     */
    dataFilters?: Array<DataFilter>;
}

/**
 * A reply to a developer metadata search request.
 * @export
 * @interface SearchDeveloperMetadataResponse
 */
export interface SearchDeveloperMetadataResponse {
    /**
     * The metadata matching the criteria of the search request.
     * @type {Array&lt;MatchedDeveloperMetadata&gt;}
     * @memberof SearchDeveloperMetadataResponse
     */
    matchedDeveloperMetadata?: Array<MatchedDeveloperMetadata>;
}

/**
 * Sets the basic filter associated with a sheet.
 * @export
 * @interface SetBasicFilterRequest
 */
export interface SetBasicFilterRequest {
    /**
     * The filter to set.
     * @type {BasicFilter}
     * @memberof SetBasicFilterRequest
     */
    filter?: BasicFilter;
}

/**
 * Sets a data validation rule to every cell in the range. To clear validation in a range, call this with no rule specified.
 * @export
 * @interface SetDataValidationRequest
 */
export interface SetDataValidationRequest {
    /**
     * The range the data validation rule should apply to.
     * @type {GridRange}
     * @memberof SetDataValidationRequest
     */
    range?: GridRange;
    /**
     * The data validation rule to set on each cell in the range, or empty to clear the data validation in the range.
     * @type {DataValidationRule}
     * @memberof SetDataValidationRequest
     */
    rule?: DataValidationRule;
}

/**
 * A sheet in a spreadsheet.
 * @export
 * @interface Sheet
 */
export interface Sheet {
    /**
     * The banded (alternating colors) ranges on this sheet.
     * @type {Array&lt;BandedRange&gt;}
     * @memberof Sheet
     */
    bandedRanges?: Array<BandedRange>;
    /**
     * The filter on this sheet, if any.
     * @type {BasicFilter}
     * @memberof Sheet
     */
    basicFilter?: BasicFilter;
    /**
     * The specifications of every chart on this sheet.
     * @type {Array&lt;EmbeddedChart&gt;}
     * @memberof Sheet
     */
    charts?: Array<EmbeddedChart>;
    /**
     * All column groups on this sheet, ordered by increasing range start index, then by group depth.
     * @type {Array&lt;DimensionGroup&gt;}
     * @memberof Sheet
     */
    columnGroups?: Array<DimensionGroup>;
    /**
     * The conditional format rules in this sheet.
     * @type {Array&lt;ConditionalFormatRule&gt;}
     * @memberof Sheet
     */
    conditionalFormats?: Array<ConditionalFormatRule>;
    /**
     * Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D).
     * @type {Array&lt;GridData&gt;}
     * @memberof Sheet
     */
    data?: Array<GridData>;
    /**
     * The developer metadata associated with a sheet.
     * @type {Array&lt;DeveloperMetadata&gt;}
     * @memberof Sheet
     */
    developerMetadata?: Array<DeveloperMetadata>;
    /**
     * The filter views in this sheet.
     * @type {Array&lt;FilterView&gt;}
     * @memberof Sheet
     */
    filterViews?: Array<FilterView>;
    /**
     * The ranges that are merged together.
     * @type {Array&lt;GridRange&gt;}
     * @memberof Sheet
     */
    merges?: Array<GridRange>;
    /**
     * The properties of the sheet.
     * @type {SheetProperties}
     * @memberof Sheet
     */
    properties?: SheetProperties;
    /**
     * The protected ranges in this sheet.
     * @type {Array&lt;ProtectedRange&gt;}
     * @memberof Sheet
     */
    protectedRanges?: Array<ProtectedRange>;
    /**
     * All row groups on this sheet, ordered by increasing range start index, then by group depth.
     * @type {Array&lt;DimensionGroup&gt;}
     * @memberof Sheet
     */
    rowGroups?: Array<DimensionGroup>;
}

/**
 * Properties of a sheet.
 * @export
 * @interface SheetProperties
 */
export interface SheetProperties {
    /**
     * Additional properties of the sheet if this sheet is a grid. (If the sheet is an object sheet, containing a chart or image, then this field will be absent.) When writing it is an error to set any grid properties on non-grid sheets.
     * @type {GridProperties}
     * @memberof SheetProperties
     */
    gridProperties?: GridProperties;
    /**
     * True if the sheet is hidden in the UI, false if it's visible.
     * @type {boolean}
     * @memberof SheetProperties
     */
    hidden?: boolean;
    /**
     * The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in \"before the move\" indexes. For example, if there were 3 sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
     * @type {number}
     * @memberof SheetProperties
     */
    index?: number;
    /**
     * True if the sheet is an RTL sheet instead of an LTR sheet.
     * @type {boolean}
     * @memberof SheetProperties
     */
    rightToLeft?: boolean;
    /**
     * The ID of the sheet. Must be non-negative. This field cannot be changed once set.
     * @type {number}
     * @memberof SheetProperties
     */
    sheetId?: number;
    /**
     * The type of sheet. Defaults to GRID. This field cannot be changed once set.
     * @type {string}
     * @memberof SheetProperties
     */
    sheetType?: SheetProperties.SheetTypeEnum;
    /**
     * The color of the tab in the UI.
     * @type {Color}
     * @memberof SheetProperties
     */
    tabColor?: Color;
    /**
     * The name of the sheet.
     * @type {string}
     * @memberof SheetProperties
     */
    title?: string;
}

/**
 * @export
 * @namespace SheetProperties
 */
export namespace SheetProperties {
    /**
     * @export
     * @enum {string}
     */
    export enum SheetTypeEnum {
        SHEETTYPEUNSPECIFIED = <any> 'SHEET_TYPE_UNSPECIFIED',
        GRID = <any> 'GRID',
        OBJECT = <any> 'OBJECT'
    }
}

/**
 * Sorts data in rows based on a sort order per column.
 * @export
 * @interface SortRangeRequest
 */
export interface SortRangeRequest {
    /**
     * The range to sort.
     * @type {GridRange}
     * @memberof SortRangeRequest
     */
    range?: GridRange;
    /**
     * The sort order per column. Later specifications are used when values are equal in the earlier specifications.
     * @type {Array&lt;SortSpec&gt;}
     * @memberof SortRangeRequest
     */
    sortSpecs?: Array<SortSpec>;
}

/**
 * A sort order associated with a specific column or row.
 * @export
 * @interface SortSpec
 */
export interface SortSpec {
    /**
     * The dimension the sort should be applied to.
     * @type {number}
     * @memberof SortSpec
     */
    dimensionIndex?: number;
    /**
     * The order data should be sorted.
     * @type {string}
     * @memberof SortSpec
     */
    sortOrder?: SortSpec.SortOrderEnum;
}

/**
 * @export
 * @namespace SortSpec
 */
export namespace SortSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum SortOrderEnum {
        SORTORDERUNSPECIFIED = <any> 'SORT_ORDER_UNSPECIFIED',
        ASCENDING = <any> 'ASCENDING',
        DESCENDING = <any> 'DESCENDING'
    }
}

/**
 * A combination of a source range and how to extend that source.
 * @export
 * @interface SourceAndDestination
 */
export interface SourceAndDestination {
    /**
     * The dimension that data should be filled into.
     * @type {string}
     * @memberof SourceAndDestination
     */
    dimension?: SourceAndDestination.DimensionEnum;
    /**
     * The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source.  Negative numbers expand before the first row or first column of the source.
     * @type {number}
     * @memberof SourceAndDestination
     */
    fillLength?: number;
    /**
     * The location of the data to use as the source of the autofill.
     * @type {GridRange}
     * @memberof SourceAndDestination
     */
    source?: GridRange;
}

/**
 * @export
 * @namespace SourceAndDestination
 */
export namespace SourceAndDestination {
    /**
     * @export
     * @enum {string}
     */
    export enum DimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * Resource that represents a spreadsheet.
 * @export
 * @interface Spreadsheet
 */
export interface Spreadsheet {
    /**
     * The developer metadata associated with a spreadsheet.
     * @type {Array&lt;DeveloperMetadata&gt;}
     * @memberof Spreadsheet
     */
    developerMetadata?: Array<DeveloperMetadata>;
    /**
     * The named ranges defined in a spreadsheet.
     * @type {Array&lt;NamedRange&gt;}
     * @memberof Spreadsheet
     */
    namedRanges?: Array<NamedRange>;
    /**
     * Overall properties of a spreadsheet.
     * @type {SpreadsheetProperties}
     * @memberof Spreadsheet
     */
    properties?: SpreadsheetProperties;
    /**
     * The sheets that are part of a spreadsheet.
     * @type {Array&lt;Sheet&gt;}
     * @memberof Spreadsheet
     */
    sheets?: Array<Sheet>;
    /**
     * The ID of the spreadsheet. This field is read-only.
     * @type {string}
     * @memberof Spreadsheet
     */
    spreadsheetId?: string;
    /**
     * The url of the spreadsheet. This field is read-only.
     * @type {string}
     * @memberof Spreadsheet
     */
    spreadsheetUrl?: string;
}

/**
 * Properties of a spreadsheet.
 * @export
 * @interface SpreadsheetProperties
 */
export interface SpreadsheetProperties {
    /**
     * The amount of time to wait before volatile functions are recalculated.
     * @type {string}
     * @memberof SpreadsheetProperties
     */
    autoRecalc?: SpreadsheetProperties.AutoRecalcEnum;
    /**
     * The default format of all cells in the spreadsheet. CellData.effectiveFormat will not be set if the cell's format is equal to this default format. This field is read-only.
     * @type {CellFormat}
     * @memberof SpreadsheetProperties
     */
    defaultFormat?: CellFormat;
    /**
     * Determines whether and how circular references are resolved with iterative calculation.  Absence of this field means that circular references will result in calculation errors.
     * @type {IterativeCalculationSettings}
     * @memberof SpreadsheetProperties
     */
    iterativeCalculationSettings?: IterativeCalculationSettings;
    /**
     * The locale of the spreadsheet in one of the following formats:  * an ISO 639-1 language code such as `en`  * an ISO 639-2 language code such as `fil`, if no 639-1 code exists  * a combination of the ISO language code and country code, such as `en_US`  Note: when updating this field, not all locales/languages are supported.
     * @type {string}
     * @memberof SpreadsheetProperties
     */
    locale?: string;
    /**
     * The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.
     * @type {string}
     * @memberof SpreadsheetProperties
     */
    timeZone?: string;
    /**
     * The title of the spreadsheet.
     * @type {string}
     * @memberof SpreadsheetProperties
     */
    title?: string;
}

/**
 * @export
 * @namespace SpreadsheetProperties
 */
export namespace SpreadsheetProperties {
    /**
     * @export
     * @enum {string}
     */
    export enum AutoRecalcEnum {
        RECALCULATIONINTERVALUNSPECIFIED = <any> 'RECALCULATION_INTERVAL_UNSPECIFIED',
        ONCHANGE = <any> 'ON_CHANGE',
        MINUTE = <any> 'MINUTE',
        HOUR = <any> 'HOUR'
    }
}

/**
 * The format of a run of text in a cell. Absent values indicate that the field isn't specified.
 * @export
 * @interface TextFormat
 */
export interface TextFormat {
    /**
     * True if the text is bold.
     * @type {boolean}
     * @memberof TextFormat
     */
    bold?: boolean;
    /**
     * The font family.
     * @type {string}
     * @memberof TextFormat
     */
    fontFamily?: string;
    /**
     * The size of the font.
     * @type {number}
     * @memberof TextFormat
     */
    fontSize?: number;
    /**
     * The foreground color of the text.
     * @type {Color}
     * @memberof TextFormat
     */
    foregroundColor?: Color;
    /**
     * True if the text is italicized.
     * @type {boolean}
     * @memberof TextFormat
     */
    italic?: boolean;
    /**
     * True if the text has a strikethrough.
     * @type {boolean}
     * @memberof TextFormat
     */
    strikethrough?: boolean;
    /**
     * True if the text is underlined.
     * @type {boolean}
     * @memberof TextFormat
     */
    underline?: boolean;
}

/**
 * A run of a text format. The format of this run continues until the start index of the next run. When updating, all fields must be set.
 * @export
 * @interface TextFormatRun
 */
export interface TextFormatRun {
    /**
     * The format of this run.  Absent values inherit the cell's format.
     * @type {TextFormat}
     * @memberof TextFormatRun
     */
    format?: TextFormat;
    /**
     * The character index where this run starts.
     * @type {number}
     * @memberof TextFormatRun
     */
    startIndex?: number;
}

/**
 * Position settings for text.
 * @export
 * @interface TextPosition
 */
export interface TextPosition {
    /**
     * Horizontal alignment setting for the piece of text.
     * @type {string}
     * @memberof TextPosition
     */
    horizontalAlignment?: TextPosition.HorizontalAlignmentEnum;
}

/**
 * @export
 * @namespace TextPosition
 */
export namespace TextPosition {
    /**
     * @export
     * @enum {string}
     */
    export enum HorizontalAlignmentEnum {
        HORIZONTALALIGNUNSPECIFIED = <any> 'HORIZONTAL_ALIGN_UNSPECIFIED',
        LEFT = <any> 'LEFT',
        CENTER = <any> 'CENTER',
        RIGHT = <any> 'RIGHT'
    }
}

/**
 * The rotation applied to text in a cell.
 * @export
 * @interface TextRotation
 */
export interface TextRotation {
    /**
     * The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards.  Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction
     * @type {number}
     * @memberof TextRotation
     */
    angle?: number;
    /**
     * If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example:      | V |     | e |     | r |     | t |     | i |     | c |     | a |     | l |
     * @type {boolean}
     * @memberof TextRotation
     */
    vertical?: boolean;
}

/**
 * Splits a column of text into multiple columns, based on a delimiter in each cell.
 * @export
 * @interface TextToColumnsRequest
 */
export interface TextToColumnsRequest {
    /**
     * The delimiter to use. Used only if delimiterType is CUSTOM.
     * @type {string}
     * @memberof TextToColumnsRequest
     */
    delimiter?: string;
    /**
     * The delimiter type to use.
     * @type {string}
     * @memberof TextToColumnsRequest
     */
    delimiterType?: TextToColumnsRequest.DelimiterTypeEnum;
    /**
     * The source data range.  This must span exactly one column.
     * @type {GridRange}
     * @memberof TextToColumnsRequest
     */
    source?: GridRange;
}

/**
 * @export
 * @namespace TextToColumnsRequest
 */
export namespace TextToColumnsRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum DelimiterTypeEnum {
        DELIMITERTYPEUNSPECIFIED = <any> 'DELIMITER_TYPE_UNSPECIFIED',
        COMMA = <any> 'COMMA',
        SEMICOLON = <any> 'SEMICOLON',
        PERIOD = <any> 'PERIOD',
        SPACE = <any> 'SPACE',
        CUSTOM = <any> 'CUSTOM',
        AUTODETECT = <any> 'AUTODETECT'
    }
}

/**
 * A color scale for a treemap chart.
 * @export
 * @interface TreemapChartColorScale
 */
export interface TreemapChartColorScale {
    /**
     * The background color for cells with a color value greater than or equal to maxValue. Defaults to #109618 if not specified.
     * @type {Color}
     * @memberof TreemapChartColorScale
     */
    maxValueColor?: Color;
    /**
     * The background color for cells with a color value at the midpoint between minValue and maxValue. Defaults to #efe6dc if not specified.
     * @type {Color}
     * @memberof TreemapChartColorScale
     */
    midValueColor?: Color;
    /**
     * The background color for cells with a color value less than or equal to minValue. Defaults to #dc3912 if not specified.
     * @type {Color}
     * @memberof TreemapChartColorScale
     */
    minValueColor?: Color;
    /**
     * The background color for cells that have no color data associated with them. Defaults to #000000 if not specified.
     * @type {Color}
     * @memberof TreemapChartColorScale
     */
    noDataColor?: Color;
}

/**
 * A <a href=\"/chart/interactive/docs/gallery/treemap\">Treemap chart</a>.
 * @export
 * @interface TreemapChartSpec
 */
export interface TreemapChartSpec {
    /**
     * The data that determines the background color of each treemap data cell. This field is optional. If not specified, size_data is used to determine background colors. If specified, the data is expected to be numeric. color_scale will determine how the values in this data map to data cell background colors.
     * @type {ChartData}
     * @memberof TreemapChartSpec
     */
    colorData?: ChartData;
    /**
     * The color scale for data cells in the treemap chart. Data cells are assigned colors based on their color values. These color values come from color_data, or from size_data if color_data is not specified. Cells with color values less than or equal to min_value will have minValueColor as their background color. Cells with color values greater than or equal to max_value will have maxValueColor as their background color. Cells with color values between min_value and max_value will have background colors on a gradient between minValueColor and maxValueColor, the midpoint of the gradient being midValueColor. Cells with missing or non-numeric color values will have noDataColor as their background color.
     * @type {TreemapChartColorScale}
     * @memberof TreemapChartSpec
     */
    colorScale?: TreemapChartColorScale;
    /**
     * The background color for header cells.
     * @type {Color}
     * @memberof TreemapChartSpec
     */
    headerColor?: Color;
    /**
     * True to hide tooltips.
     * @type {boolean}
     * @memberof TreemapChartSpec
     */
    hideTooltips?: boolean;
    /**
     * The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
     * @type {number}
     * @memberof TreemapChartSpec
     */
    hintedLevels?: number;
    /**
     * The data that contains the treemap cell labels.
     * @type {ChartData}
     * @memberof TreemapChartSpec
     */
    labels?: ChartData;
    /**
     * The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
     * @type {number}
     * @memberof TreemapChartSpec
     */
    levels?: number;
    /**
     * The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
     * @type {number}
     * @memberof TreemapChartSpec
     */
    maxValue?: number;
    /**
     * The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
     * @type {number}
     * @memberof TreemapChartSpec
     */
    minValue?: number;
    /**
     * The data the contains the treemap cells' parent labels.
     * @type {ChartData}
     * @memberof TreemapChartSpec
     */
    parentLabels?: ChartData;
    /**
     * The data that determines the size of each treemap data cell. This data is expected to be numeric. The cells corresponding to non-numeric or missing data will not be rendered. If color_data is not specified, this data is used to determine data cell background colors as well.
     * @type {ChartData}
     * @memberof TreemapChartSpec
     */
    sizeData?: ChartData;
    /**
     * The text format for all labels on the chart.
     * @type {TextFormat}
     * @memberof TreemapChartSpec
     */
    textFormat?: TextFormat;
}

/**
 * Unmerges cells in the given range.
 * @export
 * @interface UnmergeCellsRequest
 */
export interface UnmergeCellsRequest {
    /**
     * The range within which all cells should be unmerged. If the range spans multiple merges, all will be unmerged. The range must not partially span any merge.
     * @type {GridRange}
     * @memberof UnmergeCellsRequest
     */
    range?: GridRange;
}

/**
 * Updates properties of the supplied banded range.
 * @export
 * @interface UpdateBandingRequest
 */
export interface UpdateBandingRequest {
    /**
     * The banded range to update with the new properties.
     * @type {BandedRange}
     * @memberof UpdateBandingRequest
     */
    bandedRange?: BandedRange;
    /**
     * The fields that should be updated.  At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateBandingRequest
     */
    fields?: string;
}

/**
 * Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest:   1. range: A1:A5 `{ top: RED, bottom: WHITE }`  2. range: A1:A5 `{ left: BLUE }`  That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
 * @export
 * @interface UpdateBordersRequest
 */
export interface UpdateBordersRequest {
    /**
     * The border to put at the bottom of the range.
     * @type {Border}
     * @memberof UpdateBordersRequest
     */
    bottom?: Border;
    /**
     * The horizontal border to put within the range.
     * @type {Border}
     * @memberof UpdateBordersRequest
     */
    innerHorizontal?: Border;
    /**
     * The vertical border to put within the range.
     * @type {Border}
     * @memberof UpdateBordersRequest
     */
    innerVertical?: Border;
    /**
     * The border to put at the left of the range.
     * @type {Border}
     * @memberof UpdateBordersRequest
     */
    left?: Border;
    /**
     * The range whose borders should be updated.
     * @type {GridRange}
     * @memberof UpdateBordersRequest
     */
    range?: GridRange;
    /**
     * The border to put at the right of the range.
     * @type {Border}
     * @memberof UpdateBordersRequest
     */
    right?: Border;
    /**
     * The border to put at the top of the range.
     * @type {Border}
     * @memberof UpdateBordersRequest
     */
    top?: Border;
}

/**
 * Updates all cells in a range with new data.
 * @export
 * @interface UpdateCellsRequest
 */
export interface UpdateCellsRequest {
    /**
     * The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateCellsRequest
     */
    fields?: string;
    /**
     * The range to write data to.  If the data in rows does not cover the entire requested range, the fields matching those set in fields will be cleared.
     * @type {GridRange}
     * @memberof UpdateCellsRequest
     */
    range?: GridRange;
    /**
     * The data to write.
     * @type {Array&lt;RowData&gt;}
     * @memberof UpdateCellsRequest
     */
    rows?: Array<RowData>;
    /**
     * The coordinate to start writing data at. Any number of rows and columns (including a different number of columns per row) may be written.
     * @type {GridCoordinate}
     * @memberof UpdateCellsRequest
     */
    start?: GridCoordinate;
}

/**
 * Updates a chart's specifications. (This does not move or resize a chart. To move or resize a chart, use  UpdateEmbeddedObjectPositionRequest.)
 * @export
 * @interface UpdateChartSpecRequest
 */
export interface UpdateChartSpecRequest {
    /**
     * The ID of the chart to update.
     * @type {number}
     * @memberof UpdateChartSpecRequest
     */
    chartId?: number;
    /**
     * The specification to apply to the chart.
     * @type {ChartSpec}
     * @memberof UpdateChartSpecRequest
     */
    spec?: ChartSpec;
}

/**
 * Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
 * @export
 * @interface UpdateConditionalFormatRuleRequest
 */
export interface UpdateConditionalFormatRuleRequest {
    /**
     * The zero-based index of the rule that should be replaced or moved.
     * @type {number}
     * @memberof UpdateConditionalFormatRuleRequest
     */
    index?: number;
    /**
     * The zero-based new index the rule should end up at.
     * @type {number}
     * @memberof UpdateConditionalFormatRuleRequest
     */
    newIndex?: number;
    /**
     * The rule that should replace the rule at the given index.
     * @type {ConditionalFormatRule}
     * @memberof UpdateConditionalFormatRuleRequest
     */
    rule?: ConditionalFormatRule;
    /**
     * The sheet of the rule to move.  Required if new_index is set, unused otherwise.
     * @type {number}
     * @memberof UpdateConditionalFormatRuleRequest
     */
    sheetId?: number;
}

/**
 * The result of updating a conditional format rule.
 * @export
 * @interface UpdateConditionalFormatRuleResponse
 */
export interface UpdateConditionalFormatRuleResponse {
    /**
     * The index of the new rule.
     * @type {number}
     * @memberof UpdateConditionalFormatRuleResponse
     */
    newIndex?: number;
    /**
     * The new rule that replaced the old rule (if replacing), or the rule that was moved (if moved)
     * @type {ConditionalFormatRule}
     * @memberof UpdateConditionalFormatRuleResponse
     */
    newRule?: ConditionalFormatRule;
    /**
     * The old index of the rule. Not set if a rule was replaced (because it is the same as new_index).
     * @type {number}
     * @memberof UpdateConditionalFormatRuleResponse
     */
    oldIndex?: number;
    /**
     * The old (deleted) rule. Not set if a rule was moved (because it is the same as new_rule).
     * @type {ConditionalFormatRule}
     * @memberof UpdateConditionalFormatRuleResponse
     */
    oldRule?: ConditionalFormatRule;
}

/**
 * A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource.  Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
 * @export
 * @interface UpdateDeveloperMetadataRequest
 */
export interface UpdateDeveloperMetadataRequest {
    /**
     * The filters matching the developer metadata entries to update.
     * @type {Array&lt;DataFilter&gt;}
     * @memberof UpdateDeveloperMetadataRequest
     */
    dataFilters?: Array<DataFilter>;
    /**
     * The value that all metadata matched by the data filters will be updated to.
     * @type {DeveloperMetadata}
     * @memberof UpdateDeveloperMetadataRequest
     */
    developerMetadata?: DeveloperMetadata;
    /**
     * The fields that should be updated.  At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateDeveloperMetadataRequest
     */
    fields?: string;
}

/**
 * The response from updating developer metadata.
 * @export
 * @interface UpdateDeveloperMetadataResponse
 */
export interface UpdateDeveloperMetadataResponse {
    /**
     * The updated developer metadata.
     * @type {Array&lt;DeveloperMetadata&gt;}
     * @memberof UpdateDeveloperMetadataResponse
     */
    developerMetadata?: Array<DeveloperMetadata>;
}

/**
 * Updates the state of the specified group.
 * @export
 * @interface UpdateDimensionGroupRequest
 */
export interface UpdateDimensionGroupRequest {
    /**
     * The group whose state should be updated. The range and depth of the group should specify a valid group on the sheet, and all other fields updated.
     * @type {DimensionGroup}
     * @memberof UpdateDimensionGroupRequest
     */
    dimensionGroup?: DimensionGroup;
    /**
     * The fields that should be updated.  At least one field must be specified. The root `dimensionGroup` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateDimensionGroupRequest
     */
    fields?: string;
}

/**
 * Updates properties of dimensions within the specified range.
 * @export
 * @interface UpdateDimensionPropertiesRequest
 */
export interface UpdateDimensionPropertiesRequest {
    /**
     * The fields that should be updated.  At least one field must be specified. The root `properties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateDimensionPropertiesRequest
     */
    fields?: string;
    /**
     * Properties to update.
     * @type {DimensionProperties}
     * @memberof UpdateDimensionPropertiesRequest
     */
    properties?: DimensionProperties;
    /**
     * The rows or columns to update.
     * @type {DimensionRange}
     * @memberof UpdateDimensionPropertiesRequest
     */
    range?: DimensionRange;
}

/**
 * Update an embedded object's position (such as a moving or resizing a chart or image).
 * @export
 * @interface UpdateEmbeddedObjectPositionRequest
 */
export interface UpdateEmbeddedObjectPositionRequest {
    /**
     * The fields of OverlayPosition that should be updated when setting a new position. Used only if newPosition.overlayPosition is set, in which case at least one field must be specified.  The root `newPosition.overlayPosition` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateEmbeddedObjectPositionRequest
     */
    fields?: string;
    /**
     * An explicit position to move the embedded object to. If newPosition.sheetId is set, a new sheet with that ID will be created. If newPosition.newSheet is set to true, a new sheet will be created with an ID that will be chosen for you.
     * @type {EmbeddedObjectPosition}
     * @memberof UpdateEmbeddedObjectPositionRequest
     */
    newPosition?: EmbeddedObjectPosition;
    /**
     * The ID of the object to moved.
     * @type {number}
     * @memberof UpdateEmbeddedObjectPositionRequest
     */
    objectId?: number;
}

/**
 * The result of updating an embedded object's position.
 * @export
 * @interface UpdateEmbeddedObjectPositionResponse
 */
export interface UpdateEmbeddedObjectPositionResponse {
    /**
     * The new position of the embedded object.
     * @type {EmbeddedObjectPosition}
     * @memberof UpdateEmbeddedObjectPositionResponse
     */
    position?: EmbeddedObjectPosition;
}

/**
 * Updates properties of the filter view.
 * @export
 * @interface UpdateFilterViewRequest
 */
export interface UpdateFilterViewRequest {
    /**
     * The fields that should be updated.  At least one field must be specified. The root `filter` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateFilterViewRequest
     */
    fields?: string;
    /**
     * The new properties of the filter view.
     * @type {FilterView}
     * @memberof UpdateFilterViewRequest
     */
    filter?: FilterView;
}

/**
 * Updates properties of the named range with the specified namedRangeId.
 * @export
 * @interface UpdateNamedRangeRequest
 */
export interface UpdateNamedRangeRequest {
    /**
     * The fields that should be updated.  At least one field must be specified. The root `namedRange` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateNamedRangeRequest
     */
    fields?: string;
    /**
     * The named range to update with the new properties.
     * @type {NamedRange}
     * @memberof UpdateNamedRangeRequest
     */
    namedRange?: NamedRange;
}

/**
 * Updates an existing protected range with the specified protectedRangeId.
 * @export
 * @interface UpdateProtectedRangeRequest
 */
export interface UpdateProtectedRangeRequest {
    /**
     * The fields that should be updated.  At least one field must be specified. The root `protectedRange` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateProtectedRangeRequest
     */
    fields?: string;
    /**
     * The protected range to update with the new properties.
     * @type {ProtectedRange}
     * @memberof UpdateProtectedRangeRequest
     */
    protectedRange?: ProtectedRange;
}

/**
 * Updates properties of the sheet with the specified sheetId.
 * @export
 * @interface UpdateSheetPropertiesRequest
 */
export interface UpdateSheetPropertiesRequest {
    /**
     * The fields that should be updated.  At least one field must be specified. The root `properties` is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateSheetPropertiesRequest
     */
    fields?: string;
    /**
     * The properties to update.
     * @type {SheetProperties}
     * @memberof UpdateSheetPropertiesRequest
     */
    properties?: SheetProperties;
}

/**
 * Updates properties of a spreadsheet.
 * @export
 * @interface UpdateSpreadsheetPropertiesRequest
 */
export interface UpdateSpreadsheetPropertiesRequest {
    /**
     * The fields that should be updated.  At least one field must be specified. The root 'properties' is implied and should not be specified. A single `\"*\"` can be used as short-hand for listing every field.
     * @type {string}
     * @memberof UpdateSpreadsheetPropertiesRequest
     */
    fields?: string;
    /**
     * The properties to update.
     * @type {SpreadsheetProperties}
     * @memberof UpdateSpreadsheetPropertiesRequest
     */
    properties?: SpreadsheetProperties;
}

/**
 * The response when updating a range of values by a data filter in a spreadsheet.
 * @export
 * @interface UpdateValuesByDataFilterResponse
 */
export interface UpdateValuesByDataFilterResponse {
    /**
     * The data filter that selected the range that was updated.
     * @type {DataFilter}
     * @memberof UpdateValuesByDataFilterResponse
     */
    dataFilter?: DataFilter;
    /**
     * The number of cells updated.
     * @type {number}
     * @memberof UpdateValuesByDataFilterResponse
     */
    updatedCells?: number;
    /**
     * The number of columns where at least one cell in the column was updated.
     * @type {number}
     * @memberof UpdateValuesByDataFilterResponse
     */
    updatedColumns?: number;
    /**
     * The values of the cells in the range matched by the dataFilter after all updates were applied. This is only included if the request's `includeValuesInResponse` field was `true`.
     * @type {ValueRange}
     * @memberof UpdateValuesByDataFilterResponse
     */
    updatedData?: ValueRange;
    /**
     * The range (in A1 notation) that updates were applied to.
     * @type {string}
     * @memberof UpdateValuesByDataFilterResponse
     */
    updatedRange?: string;
    /**
     * The number of rows where at least one cell in the row was updated.
     * @type {number}
     * @memberof UpdateValuesByDataFilterResponse
     */
    updatedRows?: number;
}

/**
 * The response when updating a range of values in a spreadsheet.
 * @export
 * @interface UpdateValuesResponse
 */
export interface UpdateValuesResponse {
    /**
     * The spreadsheet the updates were applied to.
     * @type {string}
     * @memberof UpdateValuesResponse
     */
    spreadsheetId?: string;
    /**
     * The number of cells updated.
     * @type {number}
     * @memberof UpdateValuesResponse
     */
    updatedCells?: number;
    /**
     * The number of columns where at least one cell in the column was updated.
     * @type {number}
     * @memberof UpdateValuesResponse
     */
    updatedColumns?: number;
    /**
     * The values of the cells after updates were applied. This is only included if the request's `includeValuesInResponse` field was `true`.
     * @type {ValueRange}
     * @memberof UpdateValuesResponse
     */
    updatedData?: ValueRange;
    /**
     * The range (in A1 notation) that updates were applied to.
     * @type {string}
     * @memberof UpdateValuesResponse
     */
    updatedRange?: string;
    /**
     * The number of rows where at least one cell in the row was updated.
     * @type {number}
     * @memberof UpdateValuesResponse
     */
    updatedRows?: number;
}

/**
 * Data within a range of the spreadsheet.
 * @export
 * @interface ValueRange
 */
export interface ValueRange {
    /**
     * The major dimension of the values.  For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`.  For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.  When writing, if this field is not set, it defaults to ROWS.
     * @type {string}
     * @memberof ValueRange
     */
    majorDimension?: ValueRange.MajorDimensionEnum;
    /**
     * The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
     * @type {string}
     * @memberof ValueRange
     */
    range?: string;
    /**
     * The data that was read or to be written.  This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell.  For output, empty trailing rows and columns will not be included.  For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
     * @type {Array&lt;Array&lt;ERRORUNKNOWN&gt;&gt;}
     * @memberof ValueRange
     */
    values?: Array<Array<ERRORUNKNOWN>>;
}

/**
 * @export
 * @namespace ValueRange
 */
export namespace ValueRange {
    /**
     * @export
     * @enum {string}
     */
    export enum MajorDimensionEnum {
        DIMENSIONUNSPECIFIED = <any> 'DIMENSION_UNSPECIFIED',
        ROWS = <any> 'ROWS',
        COLUMNS = <any> 'COLUMNS'
    }
}

/**
 * Styles for a waterfall chart column.
 * @export
 * @interface WaterfallChartColumnStyle
 */
export interface WaterfallChartColumnStyle {
    /**
     * The color of the column.
     * @type {Color}
     * @memberof WaterfallChartColumnStyle
     */
    color?: Color;
    /**
     * The label of the column's legend.
     * @type {string}
     * @memberof WaterfallChartColumnStyle
     */
    label?: string;
}

/**
 * A custom subtotal column for a waterfall chart series.
 * @export
 * @interface WaterfallChartCustomSubtotal
 */
export interface WaterfallChartCustomSubtotal {
    /**
     * True if the data point at subtotal_index is the subtotal. If false, the subtotal will be computed and appear after the data point.
     * @type {boolean}
     * @memberof WaterfallChartCustomSubtotal
     */
    dataIsSubtotal?: boolean;
    /**
     * A label for the subtotal column.
     * @type {string}
     * @memberof WaterfallChartCustomSubtotal
     */
    label?: string;
    /**
     * The 0-based index of a data point within the series. If data_is_subtotal is true, the data point at this index is the subtotal. Otherwise, the subtotal appears after the data point with this index. A series can have multiple subtotals at arbitrary indices, but subtotals do not affect the indices of the data points. For example, if a series has three data points, their indices will always be 0, 1, and 2, regardless of how many subtotals exist on the series or what data points they are associated with.
     * @type {number}
     * @memberof WaterfallChartCustomSubtotal
     */
    subtotalIndex?: number;
}

/**
 * The domain of a waterfall chart.
 * @export
 * @interface WaterfallChartDomain
 */
export interface WaterfallChartDomain {
    /**
     * The data of the WaterfallChartDomain.
     * @type {ChartData}
     * @memberof WaterfallChartDomain
     */
    data?: ChartData;
    /**
     * True to reverse the order of the domain values (horizontal axis).
     * @type {boolean}
     * @memberof WaterfallChartDomain
     */
    reversed?: boolean;
}

/**
 * A single series of data for a waterfall chart.
 * @export
 * @interface WaterfallChartSeries
 */
export interface WaterfallChartSeries {
    /**
     * Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
     * @type {Array&lt;WaterfallChartCustomSubtotal&gt;}
     * @memberof WaterfallChartSeries
     */
    customSubtotals?: Array<WaterfallChartCustomSubtotal>;
    /**
     * The data being visualized in this series.
     * @type {ChartData}
     * @memberof WaterfallChartSeries
     */
    data?: ChartData;
    /**
     * True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
     * @type {boolean}
     * @memberof WaterfallChartSeries
     */
    hideTrailingSubtotal?: boolean;
    /**
     * Styles for all columns in this series with negative values.
     * @type {WaterfallChartColumnStyle}
     * @memberof WaterfallChartSeries
     */
    negativeColumnsStyle?: WaterfallChartColumnStyle;
    /**
     * Styles for all columns in this series with positive values.
     * @type {WaterfallChartColumnStyle}
     * @memberof WaterfallChartSeries
     */
    positiveColumnsStyle?: WaterfallChartColumnStyle;
    /**
     * Styles for all subtotal columns in this series.
     * @type {WaterfallChartColumnStyle}
     * @memberof WaterfallChartSeries
     */
    subtotalColumnsStyle?: WaterfallChartColumnStyle;
}

/**
 * A waterfall chart.
 * @export
 * @interface WaterfallChartSpec
 */
export interface WaterfallChartSpec {
    /**
     * The line style for the connector lines.
     * @type {LineStyle}
     * @memberof WaterfallChartSpec
     */
    connectorLineStyle?: LineStyle;
    /**
     * The domain data (horizontal axis) for the waterfall chart.
     * @type {WaterfallChartDomain}
     * @memberof WaterfallChartSpec
     */
    domain?: WaterfallChartDomain;
    /**
     * True to interpret the first value as a total.
     * @type {boolean}
     * @memberof WaterfallChartSpec
     */
    firstValueIsTotal?: boolean;
    /**
     * True to hide connector lines between columns.
     * @type {boolean}
     * @memberof WaterfallChartSpec
     */
    hideConnectorLines?: boolean;
    /**
     * The data this waterfall chart is visualizing.
     * @type {Array&lt;WaterfallChartSeries&gt;}
     * @memberof WaterfallChartSpec
     */
    series?: Array<WaterfallChartSeries>;
    /**
     * The stacked type.
     * @type {string}
     * @memberof WaterfallChartSpec
     */
    stackedType?: WaterfallChartSpec.StackedTypeEnum;
}

/**
 * @export
 * @namespace WaterfallChartSpec
 */
export namespace WaterfallChartSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum StackedTypeEnum {
        WATERFALLSTACKEDTYPEUNSPECIFIED = <any> 'WATERFALL_STACKED_TYPE_UNSPECIFIED',
        STACKED = <any> 'STACKED',
        SEQUENTIAL = <any> 'SEQUENTIAL'
    }
}


/**
 * SpreadsheetsApi - fetch parameter creator
 * @export
 */
export const SpreadsheetsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Applies one or more updates to the spreadsheet.  Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied.  Some requests have replies to give you some information about how they are applied. The replies will mirror the requests.  For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order.  Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
         * @param {string} spreadsheetId The spreadsheet to apply the updates to.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateSpreadsheetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateSpreadsheetRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsBatchUpdate.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}:batchUpdate`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchUpdateSpreadsheetRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a spreadsheet, returning the newly created spreadsheet.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {Spreadsheet} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsCreate(xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: Spreadsheet, options: any = {}): FetchArgs {
            const localVarPath = `/v4/spreadsheets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Spreadsheet" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
         * @param {number} metadataId The ID of the developer metadata to retrieve.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsDeveloperMetadataGet(metadataId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, options: any = {}): FetchArgs {
            // verify required parameter 'metadataId' is not null or undefined
            if (metadataId === null || metadataId === undefined) {
                throw new RequiredError('metadataId','Required parameter metadataId was null or undefined when calling sheetsSpreadsheetsDeveloperMetadataGet.');
            }
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsDeveloperMetadataGet.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}`
                .replace(`{${"metadataId"}}`, encodeURIComponent(String(metadataId)))
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {SearchDeveloperMetadataRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: SearchDeveloperMetadataRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsDeveloperMetadataSearch.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/developerMetadata:search`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SearchDeveloperMetadataRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData URL parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.  To retrieve only subsets of the spreadsheet, use the ranges URL parameter. Multiple ranges can be specified.  Limiting the range will return only the portions of the spreadsheet that intersect the requested ranges. Ranges are specified using A1 notation.
         * @param {string} spreadsheetId The spreadsheet to request.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {boolean} [includeGridData] True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
         * @param {Array&lt;string&gt;} [ranges] The ranges to retrieve from the spreadsheet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, includeGridData?: boolean, ranges?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsGet.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets.readonly"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            if (includeGridData !== undefined) {
                localVarQueryParameter['includeGridData'] = includeGridData;
            }

            if (ranges) {
                localVarQueryParameter['ranges'] = ranges;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified.  Specifying one or more data filters will return the portions of the spreadsheet that intersect ranges matched by any of the filters.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.
         * @param {string} spreadsheetId The spreadsheet to request.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {GetSpreadsheetByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: GetSpreadsheetByDataFilterRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsGetByDataFilter.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}:getByDataFilter`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GetSpreadsheetByDataFilterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
         * @param {number} sheetId The ID of the sheet to copy.
         * @param {string} spreadsheetId The ID of the spreadsheet containing the sheet to copy.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {CopySheetToAnotherSpreadsheetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsSheetsCopyTo(sheetId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: CopySheetToAnotherSpreadsheetRequest, options: any = {}): FetchArgs {
            // verify required parameter 'sheetId' is not null or undefined
            if (sheetId === null || sheetId === undefined) {
                throw new RequiredError('sheetId','Required parameter sheetId was null or undefined when calling sheetsSpreadsheetsSheetsCopyTo.');
            }
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsSheetsCopyTo.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo`
                .replace(`{${"sheetId"}}`, encodeURIComponent(String(sheetId)))
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CopySheetToAnotherSpreadsheetRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended.  The caller must specify the spreadsheet ID, range, and a valueInputOption.  The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
         * @param {string} range The A1 notation of a range to search for a logical table of data. Values will be appended after the last row of the table.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ValueRange} [body] 
         * @param {boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
         * @param {string} [insertDataOption] How the input data should be inserted.
         * @param {string} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {string} [valueInputOption] How the input data should be interpreted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesAppend(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, insertDataOption?: string, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options: any = {}): FetchArgs {
            // verify required parameter 'range' is not null or undefined
            if (range === null || range === undefined) {
                throw new RequiredError('range','Required parameter range was null or undefined when calling sheetsSpreadsheetsValuesAppend.');
            }
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesAppend.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values/{range}:append`
                .replace(`{${"range"}}`, encodeURIComponent(String(range)))
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            if (includeValuesInResponse !== undefined) {
                localVarQueryParameter['includeValuesInResponse'] = includeValuesInResponse;
            }

            if (insertDataOption !== undefined) {
                localVarQueryParameter['insertDataOption'] = insertDataOption;
            }

            if (responseDateTimeRenderOption !== undefined) {
                localVarQueryParameter['responseDateTimeRenderOption'] = responseDateTimeRenderOption;
            }

            if (responseValueRenderOption !== undefined) {
                localVarQueryParameter['responseValueRenderOption'] = responseValueRenderOption;
            }

            if (valueInputOption !== undefined) {
                localVarQueryParameter['valueInputOption'] = valueInputOption;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ValueRange" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchClearValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchClear(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesBatchClear.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values:batchClear`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchClearValuesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared.  Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchClearValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesByDataFilterRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesBatchClearByDataFilter.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchClearValuesByDataFilterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {string} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
         * @param {Array&lt;string&gt;} [ranges] The A1 notation of the values to retrieve.
         * @param {string} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, ranges?: Array<string>, valueRenderOption?: string, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesBatchGet.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values:batchGet`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets.readonly"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            if (dateTimeRenderOption !== undefined) {
                localVarQueryParameter['dateTimeRenderOption'] = dateTimeRenderOption;
            }

            if (majorDimension !== undefined) {
                localVarQueryParameter['majorDimension'] = majorDimension;
            }

            if (ranges) {
                localVarQueryParameter['ranges'] = ranges;
            }

            if (valueRenderOption !== undefined) {
                localVarQueryParameter['valueRenderOption'] = valueRenderOption;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters.  Ranges that match any of the data filters in the request will be returned.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchGetValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchGetValuesByDataFilterRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesBatchGetByDataFilter.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchGetValuesByDataFilterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesBatchUpdate.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values:batchUpdate`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchUpdateValuesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesByDataFilterRequest, options: any = {}): FetchArgs {
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesBatchUpdateByDataFilter.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter`
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchUpdateValuesByDataFilterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} range The A1 notation of the values to clear.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ClearValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesClear(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ClearValuesRequest, options: any = {}): FetchArgs {
            // verify required parameter 'range' is not null or undefined
            if (range === null || range === undefined) {
                throw new RequiredError('range','Required parameter range was null or undefined when calling sheetsSpreadsheetsValuesClear.');
            }
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesClear.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values/{range}:clear`
                .replace(`{${"range"}}`, encodeURIComponent(String(range)))
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ClearValuesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
         * @param {string} range The A1 notation of the values to retrieve.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {string} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
         * @param {string} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesGet(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, valueRenderOption?: string, options: any = {}): FetchArgs {
            // verify required parameter 'range' is not null or undefined
            if (range === null || range === undefined) {
                throw new RequiredError('range','Required parameter range was null or undefined when calling sheetsSpreadsheetsValuesGet.');
            }
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesGet.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values/{range}`
                .replace(`{${"range"}}`, encodeURIComponent(String(range)))
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets.readonly"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            if (dateTimeRenderOption !== undefined) {
                localVarQueryParameter['dateTimeRenderOption'] = dateTimeRenderOption;
            }

            if (majorDimension !== undefined) {
                localVarQueryParameter['majorDimension'] = majorDimension;
            }

            if (valueRenderOption !== undefined) {
                localVarQueryParameter['valueRenderOption'] = valueRenderOption;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
         * @param {string} range The A1 notation of the values to update.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ValueRange} [body] 
         * @param {boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than than the range actually written, the response will include all values in the requested range (excluding trailing empty rows and columns).
         * @param {string} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {string} [valueInputOption] How the input data should be interpreted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesUpdate(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options: any = {}): FetchArgs {
            // verify required parameter 'range' is not null or undefined
            if (range === null || range === undefined) {
                throw new RequiredError('range','Required parameter range was null or undefined when calling sheetsSpreadsheetsValuesUpdate.');
            }
            // verify required parameter 'spreadsheetId' is not null or undefined
            if (spreadsheetId === null || spreadsheetId === undefined) {
                throw new RequiredError('spreadsheetId','Required parameter spreadsheetId was null or undefined when calling sheetsSpreadsheetsValuesUpdate.');
            }
            const localVarPath = `/v4/spreadsheets/{spreadsheetId}/values/{range}`
                .replace(`{${"range"}}`, encodeURIComponent(String(range)))
                .replace(`{${"spreadsheetId"}}`, encodeURIComponent(String(spreadsheetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("Oauth2", ["https://www.googleapis.com/auth/spreadsheets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (xgafv !== undefined) {
                localVarQueryParameter['$.xgafv'] = xgafv;
            }

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (alt !== undefined) {
                localVarQueryParameter['alt'] = alt;
            }

            if (bearerToken !== undefined) {
                localVarQueryParameter['bearer_token'] = bearerToken;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (oauthToken !== undefined) {
                localVarQueryParameter['oauth_token'] = oauthToken;
            }

            if (pp !== undefined) {
                localVarQueryParameter['pp'] = pp;
            }

            if (prettyPrint !== undefined) {
                localVarQueryParameter['prettyPrint'] = prettyPrint;
            }

            if (quotaUser !== undefined) {
                localVarQueryParameter['quotaUser'] = quotaUser;
            }

            if (uploadType !== undefined) {
                localVarQueryParameter['uploadType'] = uploadType;
            }

            if (uploadProtocol !== undefined) {
                localVarQueryParameter['upload_protocol'] = uploadProtocol;
            }

            if (includeValuesInResponse !== undefined) {
                localVarQueryParameter['includeValuesInResponse'] = includeValuesInResponse;
            }

            if (responseDateTimeRenderOption !== undefined) {
                localVarQueryParameter['responseDateTimeRenderOption'] = responseDateTimeRenderOption;
            }

            if (responseValueRenderOption !== undefined) {
                localVarQueryParameter['responseValueRenderOption'] = responseValueRenderOption;
            }

            if (valueInputOption !== undefined) {
                localVarQueryParameter['valueInputOption'] = valueInputOption;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ValueRange" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpreadsheetsApi - functional programming interface
 * @export
 */
export const SpreadsheetsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Applies one or more updates to the spreadsheet.  Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied.  Some requests have replies to give you some information about how they are applied. The replies will mirror the requests.  For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order.  Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
         * @param {string} spreadsheetId The spreadsheet to apply the updates to.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateSpreadsheetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateSpreadsheetRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchUpdateSpreadsheetResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsBatchUpdate(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a spreadsheet, returning the newly created spreadsheet.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {Spreadsheet} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsCreate(xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: Spreadsheet, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Spreadsheet> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsCreate(xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
         * @param {number} metadataId The ID of the developer metadata to retrieve.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsDeveloperMetadataGet(metadataId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DeveloperMetadata> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsDeveloperMetadataGet(metadataId, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {SearchDeveloperMetadataRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: SearchDeveloperMetadataRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchDeveloperMetadataResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData URL parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.  To retrieve only subsets of the spreadsheet, use the ranges URL parameter. Multiple ranges can be specified.  Limiting the range will return only the portions of the spreadsheet that intersect the requested ranges. Ranges are specified using A1 notation.
         * @param {string} spreadsheetId The spreadsheet to request.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {boolean} [includeGridData] True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
         * @param {Array&lt;string&gt;} [ranges] The ranges to retrieve from the spreadsheet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, includeGridData?: boolean, ranges?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Spreadsheet> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsGet(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, includeGridData, ranges, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified.  Specifying one or more data filters will return the portions of the spreadsheet that intersect ranges matched by any of the filters.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.
         * @param {string} spreadsheetId The spreadsheet to request.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {GetSpreadsheetByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: GetSpreadsheetByDataFilterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Spreadsheet> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsGetByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
         * @param {number} sheetId The ID of the sheet to copy.
         * @param {string} spreadsheetId The ID of the spreadsheet containing the sheet to copy.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {CopySheetToAnotherSpreadsheetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsSheetsCopyTo(sheetId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: CopySheetToAnotherSpreadsheetRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SheetProperties> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsSheetsCopyTo(sheetId, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended.  The caller must specify the spreadsheet ID, range, and a valueInputOption.  The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
         * @param {string} range The A1 notation of a range to search for a logical table of data. Values will be appended after the last row of the table.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ValueRange} [body] 
         * @param {boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
         * @param {string} [insertDataOption] How the input data should be inserted.
         * @param {string} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {string} [valueInputOption] How the input data should be interpreted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesAppend(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, insertDataOption?: string, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AppendValuesResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesAppend(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, includeValuesInResponse, insertDataOption, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchClearValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchClear(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchClearValuesResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesBatchClear(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared.  Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchClearValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesByDataFilterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchClearValuesByDataFilterResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {string} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
         * @param {Array&lt;string&gt;} [ranges] The A1 notation of the values to retrieve.
         * @param {string} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, ranges?: Array<string>, valueRenderOption?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchGetValuesResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesBatchGet(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, dateTimeRenderOption, majorDimension, ranges, valueRenderOption, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters.  Ranges that match any of the data filters in the request will be returned.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchGetValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchGetValuesByDataFilterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchGetValuesByDataFilterResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchUpdateValuesResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesByDataFilterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchUpdateValuesByDataFilterResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} range The A1 notation of the values to clear.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ClearValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesClear(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ClearValuesRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClearValuesResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesClear(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
         * @param {string} range The A1 notation of the values to retrieve.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {string} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
         * @param {string} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesGet(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, valueRenderOption?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ValueRange> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesGet(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, dateTimeRenderOption, majorDimension, valueRenderOption, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
         * @param {string} range The A1 notation of the values to update.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ValueRange} [body] 
         * @param {boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than than the range actually written, the response will include all values in the requested range (excluding trailing empty rows and columns).
         * @param {string} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {string} [valueInputOption] How the input data should be interpreted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesUpdate(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdateValuesResponse> {
            const localVarFetchArgs = SpreadsheetsApiFetchParamCreator(configuration).sheetsSpreadsheetsValuesUpdate(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, includeValuesInResponse, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SpreadsheetsApi - factory interface
 * @export
 */
export const SpreadsheetsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Applies one or more updates to the spreadsheet.  Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied.  Some requests have replies to give you some information about how they are applied. The replies will mirror the requests.  For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order.  Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
         * @param {string} spreadsheetId The spreadsheet to apply the updates to.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateSpreadsheetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateSpreadsheetRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsBatchUpdate(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Creates a spreadsheet, returning the newly created spreadsheet.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {Spreadsheet} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsCreate(xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: Spreadsheet, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsCreate(xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
         * @param {number} metadataId The ID of the developer metadata to retrieve.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsDeveloperMetadataGet(metadataId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsDeveloperMetadataGet(metadataId, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, options)(fetch, basePath);
        },
        /**
         * Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {SearchDeveloperMetadataRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: SearchDeveloperMetadataRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData URL parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.  To retrieve only subsets of the spreadsheet, use the ranges URL parameter. Multiple ranges can be specified.  Limiting the range will return only the portions of the spreadsheet that intersect the requested ranges. Ranges are specified using A1 notation.
         * @param {string} spreadsheetId The spreadsheet to request.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {boolean} [includeGridData] True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
         * @param {Array&lt;string&gt;} [ranges] The ranges to retrieve from the spreadsheet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, includeGridData?: boolean, ranges?: Array<string>, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsGet(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, includeGridData, ranges, options)(fetch, basePath);
        },
        /**
         * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified.  Specifying one or more data filters will return the portions of the spreadsheet that intersect ranges matched by any of the filters.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.
         * @param {string} spreadsheetId The spreadsheet to request.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {GetSpreadsheetByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: GetSpreadsheetByDataFilterRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsGetByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
         * @param {number} sheetId The ID of the sheet to copy.
         * @param {string} spreadsheetId The ID of the spreadsheet containing the sheet to copy.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {CopySheetToAnotherSpreadsheetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsSheetsCopyTo(sheetId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: CopySheetToAnotherSpreadsheetRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsSheetsCopyTo(sheetId, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended.  The caller must specify the spreadsheet ID, range, and a valueInputOption.  The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
         * @param {string} range The A1 notation of a range to search for a logical table of data. Values will be appended after the last row of the table.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ValueRange} [body] 
         * @param {boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
         * @param {string} [insertDataOption] How the input data should be inserted.
         * @param {string} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {string} [valueInputOption] How the input data should be interpreted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesAppend(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, insertDataOption?: string, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesAppend(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, includeValuesInResponse, insertDataOption, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, options)(fetch, basePath);
        },
        /**
         * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchClearValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchClear(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesBatchClear(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared.  Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchClearValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesByDataFilterRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {string} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
         * @param {Array&lt;string&gt;} [ranges] The A1 notation of the values to retrieve.
         * @param {string} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, ranges?: Array<string>, valueRenderOption?: string, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesBatchGet(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, dateTimeRenderOption, majorDimension, ranges, valueRenderOption, options)(fetch, basePath);
        },
        /**
         * Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters.  Ranges that match any of the data filters in the request will be returned.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchGetValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchGetValuesByDataFilterRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {BatchUpdateValuesByDataFilterRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesByDataFilterRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
         * @param {string} range The A1 notation of the values to clear.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ClearValuesRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesClear(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ClearValuesRequest, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesClear(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(fetch, basePath);
        },
        /**
         * Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
         * @param {string} range The A1 notation of the values to retrieve.
         * @param {string} spreadsheetId The ID of the spreadsheet to retrieve data from.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {string} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
         * @param {string} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesGet(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, valueRenderOption?: string, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesGet(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, dateTimeRenderOption, majorDimension, valueRenderOption, options)(fetch, basePath);
        },
        /**
         * Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
         * @param {string} range The A1 notation of the values to update.
         * @param {string} spreadsheetId The ID of the spreadsheet to update.
         * @param {string} [xgafv] V1 error format.
         * @param {string} [accessToken] OAuth access token.
         * @param {string} [alt] Data format for response.
         * @param {string} [bearerToken] OAuth bearer token.
         * @param {string} [callback] JSONP
         * @param {string} [fields] Selector specifying which fields to include in a partial response.
         * @param {string} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         * @param {string} [oauthToken] OAuth 2.0 token for the current user.
         * @param {boolean} [pp] Pretty-print response.
         * @param {boolean} [prettyPrint] Returns response with indentations and line breaks.
         * @param {string} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         * @param {string} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
         * @param {string} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
         * @param {ValueRange} [body] 
         * @param {boolean} [includeValuesInResponse] Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than than the range actually written, the response will include all values in the requested range (excluding trailing empty rows and columns).
         * @param {string} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
         * @param {string} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
         * @param {string} [valueInputOption] How the input data should be interpreted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sheetsSpreadsheetsValuesUpdate(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options?: any) {
            return SpreadsheetsApiFp(configuration).sheetsSpreadsheetsValuesUpdate(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, includeValuesInResponse, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, options)(fetch, basePath);
        },
    };
};

/**
 * SpreadsheetsApi - object-oriented interface
 * @export
 * @class SpreadsheetsApi
 * @extends {BaseAPI}
 */
export class SpreadsheetsApi extends BaseAPI {
    /**
     * Applies one or more updates to the spreadsheet.  Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied.  Some requests have replies to give you some information about how they are applied. The replies will mirror the requests.  For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order.  Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
     * @param {} spreadsheetId The spreadsheet to apply the updates to.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateSpreadsheetRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsBatchUpdate(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Creates a spreadsheet, returning the newly created spreadsheet.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsCreate(xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: Spreadsheet, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsCreate(xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
     * @param {} metadataId The ID of the developer metadata to retrieve.
     * @param {} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsDeveloperMetadataGet(metadataId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsDeveloperMetadataGet(metadataId, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, options)(this.fetch, this.basePath);
    }

    /**
     * Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
     * @param {} spreadsheetId The ID of the spreadsheet to retrieve metadata from.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: SearchDeveloperMetadataRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsDeveloperMetadataSearch(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData URL parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.  To retrieve only subsets of the spreadsheet, use the ranges URL parameter. Multiple ranges can be specified.  Limiting the range will return only the portions of the spreadsheet that intersect the requested ranges. Ranges are specified using A1 notation.
     * @param {} spreadsheetId The spreadsheet to request.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [includeGridData] True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
     * @param {} [ranges] The ranges to retrieve from the spreadsheet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, includeGridData?: boolean, ranges?: Array<string>, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsGet(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, includeGridData, ranges, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID.  This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified.  Specifying one or more data filters will return the portions of the spreadsheet that intersect ranges matched by any of the filters.  By default, data within grids will not be returned. You can include grid data one of two ways:  * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP  * Set the includeGridData parameter to true.  If a field mask is set, the `includeGridData` parameter is ignored  For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.
     * @param {} spreadsheetId The spreadsheet to request.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: GetSpreadsheetByDataFilterRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsGetByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
     * @param {} sheetId The ID of the sheet to copy.
     * @param {} spreadsheetId The ID of the spreadsheet containing the sheet to copy.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsSheetsCopyTo(sheetId: number, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: CopySheetToAnotherSpreadsheetRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsSheetsCopyTo(sheetId, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended.  The caller must specify the spreadsheet ID, range, and a valueInputOption.  The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
     * @param {} range The A1 notation of a range to search for a logical table of data. Values will be appended after the last row of the table.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {} [includeValuesInResponse] Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
     * @param {} [insertDataOption] How the input data should be inserted.
     * @param {} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
     * @param {} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @param {} [valueInputOption] How the input data should be interpreted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesAppend(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, insertDataOption?: string, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesAppend(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, includeValuesInResponse, insertDataOption, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, options)(this.fetch, this.basePath);
    }

    /**
     * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesBatchClear(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesBatchClear(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared.  Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchClearValuesByDataFilterRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesBatchClearByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
     * @param {} spreadsheetId The ID of the spreadsheet to retrieve data from.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
     * @param {} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
     * @param {} [ranges] The A1 notation of the values to retrieve.
     * @param {} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesBatchGet(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, ranges?: Array<string>, valueRenderOption?: string, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesBatchGet(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, dateTimeRenderOption, majorDimension, ranges, valueRenderOption, options)(this.fetch, this.basePath);
    }

    /**
     * Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters.  Ranges that match any of the data filters in the request will be returned.
     * @param {} spreadsheetId The ID of the spreadsheet to retrieve data from.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchGetValuesByDataFilterRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesBatchGetByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesBatchUpdate(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: BatchUpdateValuesByDataFilterRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesBatchUpdateByDataFilter(spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
     * @param {} range The A1 notation of the values to clear.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesClear(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ClearValuesRequest, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesClear(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
     * @param {} range The A1 notation of the values to retrieve.
     * @param {} spreadsheetId The ID of the spreadsheet to retrieve data from.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [dateTimeRenderOption] How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
     * @param {} [majorDimension] The major dimension that results should use.  For example, if the spreadsheet data is: &#x60;A1&#x3D;1,B1&#x3D;2,A2&#x3D;3,B2&#x3D;4&#x60;, then requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;ROWS&#x60; will return &#x60;[[1,2],[3,4]]&#x60;, whereas requesting &#x60;range&#x3D;A1:B2,majorDimension&#x3D;COLUMNS&#x60; will return &#x60;[[1,3],[2,4]]&#x60;.
     * @param {} [valueRenderOption] How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesGet(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, dateTimeRenderOption?: string, majorDimension?: string, valueRenderOption?: string, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesGet(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, dateTimeRenderOption, majorDimension, valueRenderOption, options)(this.fetch, this.basePath);
    }

    /**
     * Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
     * @param {} range The A1 notation of the values to update.
     * @param {} spreadsheetId The ID of the spreadsheet to update.
     * @param {} [xgafv] V1 error format.
     * @param {} [accessToken] OAuth access token.
     * @param {} [alt] Data format for response.
     * @param {} [bearerToken] OAuth bearer token.
     * @param {} [callback] JSONP
     * @param {} [fields] Selector specifying which fields to include in a partial response.
     * @param {} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {} [oauthToken] OAuth 2.0 token for the current user.
     * @param {} [pp] Pretty-print response.
     * @param {} [prettyPrint] Returns response with indentations and line breaks.
     * @param {} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {} [uploadType] Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
     * @param {} [uploadProtocol] Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
     * @param {} [body] 
     * @param {} [includeValuesInResponse] Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than than the range actually written, the response will include all values in the requested range (excluding trailing empty rows and columns).
     * @param {} [responseDateTimeRenderOption] Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
     * @param {} [responseValueRenderOption] Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.
     * @param {} [valueInputOption] How the input data should be interpreted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpreadsheetsApi
     */
    public sheetsSpreadsheetsValuesUpdate(range: string, spreadsheetId: string, xgafv?: string, accessToken?: string, alt?: string, bearerToken?: string, callback?: string, fields?: string, key?: string, oauthToken?: string, pp?: boolean, prettyPrint?: boolean, quotaUser?: string, uploadType?: string, uploadProtocol?: string, body?: ValueRange, includeValuesInResponse?: boolean, responseDateTimeRenderOption?: string, responseValueRenderOption?: string, valueInputOption?: string, options?: any) {
        return SpreadsheetsApiFp(this.configuration).sheetsSpreadsheetsValuesUpdate(range, spreadsheetId, xgafv, accessToken, alt, bearerToken, callback, fields, key, oauthToken, pp, prettyPrint, quotaUser, uploadType, uploadProtocol, body, includeValuesInResponse, responseDateTimeRenderOption, responseValueRenderOption, valueInputOption, options)(this.fetch, this.basePath);
    }

}

